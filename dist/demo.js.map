{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/tiled_scrolling_demo/TiledScrollingDemo.ts","src/wolfie2d/AI/AIBehavior.ts","src/wolfie2d/AI/PaceRunAI.ts","src/wolfie2d/AI/PlayerAI.ts","src/wolfie2d/AI/RandomWalkAI.ts","src/wolfie2d/Game.ts","src/wolfie2d/files/ResourceManager.ts","src/wolfie2d/loop/GameLoopTemplate.ts","src/wolfie2d/math/MathUtilities.ts","src/wolfie2d/math/Matrix.ts","src/wolfie2d/math/Vector3.ts","src/wolfie2d/math/boundingCircle.ts","src/wolfie2d/physics/GamePhysics.ts","src/wolfie2d/rendering/TextRenderer.ts","src/wolfie2d/rendering/WebGLGameRenderingComponent.ts","src/wolfie2d/rendering/WebGLGameRenderingSystem.ts","src/wolfie2d/rendering/WebGLGameShader.ts","src/wolfie2d/rendering/WebGLGameSpriteRenderer.ts","src/wolfie2d/rendering/WebGLGameTexture.ts","src/wolfie2d/rendering/WebGLGameTiledLayerRenderer.ts","src/wolfie2d/scene/SceneGraph.ts","src/wolfie2d/scene/SceneObject.ts","src/wolfie2d/scene/Viewport.ts","src/wolfie2d/scene/sprite/AnimatedSprite.ts","src/wolfie2d/scene/sprite/AnimatedSpriteType.ts","src/wolfie2d/scene/tiles/TileSet.ts","src/wolfie2d/scene/tiles/TiledLayer.ts","src/wolfie2d/ui/UIController.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n * TiledScrollingDemo.ts - demonstrates how tiled layers can be rendered\n * and scrolled using a viewport. \n */\nimport { Game } from '../wolfie2d/Game'\nimport { AnimatedSprite } from '../wolfie2d/scene/sprite/AnimatedSprite'\nimport { AnimatedSpriteType } from '../wolfie2d/scene/sprite/AnimatedSpriteType'\nimport { TiledLayer } from '../wolfie2d/scene/tiles/TiledLayer'\nimport { SceneGraph } from '../wolfie2d/scene/SceneGraph'\nimport { Viewport } from '../wolfie2d/scene/Viewport'\nimport { TextToRender, TextRenderer } from '../wolfie2d/rendering/TextRenderer'\nimport { AIBehavior } from '../wolfie2d/AI/AIBehavior'\nimport { RandomWalkAI } from '../wolfie2d/AI/RandomWalkAI'\nimport { PaceRunAI } from '../wolfie2d/AI/PaceRunAI'\nimport { PlayerAI } from '../wolfie2d/AI/PlayerAI'\n\n// THIS IS THE ENTRY POINT INTO OUR APPLICATION, WE MAKE\n// THE Game OBJECT AND INITIALIZE IT WITH THE CANVASES\nlet game = new Game(\"game_canvas\", \"text_canvas\");\n\n// WE THEN LOAD OUR GAME SCENE, WHICH WILL FIRST LOAD\n// ALL GAME RESOURCES, THEN CREATE ALL SHADERS FOR\n// RENDERING, AND THEN PLACE ALL GAME OBJECTS IN THE SCENE.\n// ONCE IT IS COMPLETED WE CAN START THE GAME\nconst DESERT_SCENE_PATH = \"resources/scenes/ScrollableDesert.json\";\ngame.getResourceManager().loadScene(DESERT_SCENE_PATH,\n    game.getSceneGraph(),\n    game.getRenderingSystem(),\n    function () {\n\n\n\n        // ADD ANY CUSTOM STUFF WE NEED HERE, LIKE TEXT RENDERING\n        // LET'S ADD A BUNCH OF RANDOM SPRITES\n        let world: TiledLayer[] = game.getSceneGraph().getTiledLayers();\n        let worldWidth: number = world[0].getColumns() * world[0].getTileSet().getTileWidth();\n        let worldHeight: number = world[0].getRows() * world[0].getTileSet().getTileHeight();\n        // let randomX: number = Math.random() * worldWidth;\n        // let randomY: number = Math.random() * worldHeight;\n        for (let i = 0; i < 50; i++) {\n            let type: AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"COCKROACH\");\n            let ai: AIBehavior = new RandomWalkAI(game.getSceneGraph());\n            let randomSprite: AnimatedSprite = new AnimatedSprite(type, \"IDLE\");\n            randomSprite.setAI(ai);\n            let randomX: number = Math.random() * worldWidth;\n            let randomY: number = Math.random() * worldHeight;\n            randomSprite.getPosition().set(randomX, randomY, 0, 1);\n            randomSprite.setDirection(90 * Math.floor(Math.random() * 4));\n            game.getSceneGraph().addAnimatedSprite(randomSprite);\n        }\n        for (let i = 0; i < 50; i++) {\n            let type: AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"CAMEL_SPIDER\");\n            let ai: AIBehavior = new PaceRunAI(game.getSceneGraph()); // make other AI and change class\n            let randomSprite: AnimatedSprite = new AnimatedSprite(type, \"IDLE\");\n            console.log(randomSprite.getSpriteType().getSpriteSheetTexture().webGLTextureId);\n            randomSprite.setAI(ai);\n            let randomX: number = Math.random() * worldWidth;\n            let randomY: number = Math.random() * worldHeight;\n            randomSprite.getPosition().set(randomX, randomY, 0, 1);\n            randomSprite.setDirection(90 * Math.floor(Math.random() * 4));\n            game.getSceneGraph().addAnimatedSprite(randomSprite);\n        }\n\n\n        let type: AnimatedSpriteType = game.getResourceManager().getAnimatedSpriteType(\"FUNNEL_WEB_SPIDER\");\n        let ai: AIBehavior = new PlayerAI(game.getSceneGraph());\n        let player: AnimatedSprite = new AnimatedSprite(type, \"IDLE\");\n        player.setAI(ai);\n        player.setIgnoreViewport();\n        player.getPosition().set(worldWidth / 5, worldHeight / 8, 0, 1);\n        player.setDirection(90 * Math.floor(Math.random() * 4));\n        game.getSceneGraph().addAnimatedSprite(player);\n        game.getSceneGraph().setPlayer(player)\n        // console.log(randomSprite.getSpriteType().getSpriteSheetTexture().webGLTextureId);\n\n\n\n        // NOW ADD TEXT RENDERING. WE ARE GOING TO RENDER 3 THINGS:\n        // NUMBER OF SPRITES IN THE SCENE\n        // LOCATION IN GAME WORLD OF VIEWPORT\n        // NUMBER OF SPRITES IN VISIBLE SET (i.e. IN THE VIEWPORT)\n        let sceneGraph: SceneGraph;\n        sceneGraph = game.getSceneGraph();\n        let spritesInSceneText: TextToRender = new TextToRender(\"Sprites in Scene\", \"\", 20, 50, function () {\n            spritesInSceneText.text = \"Sprites in Scene: \" + sceneGraph.getNumSprites();\n        });\n        let viewportText: TextToRender = new TextToRender(\"Viewport\", \"\", 20, 70, function () {\n            let viewport: Viewport = sceneGraph.getViewport();\n            viewportText.text = \"Viewport (w, h, x, y): (\" + viewport.getWidth() + \", \"\n                + viewport.getHeight() + \", \"\n                + viewport.getX() + \", \"\n                + viewport.getY() + \")\";\n        });\n        let spritesInViewportText: TextToRender = new TextToRender(\"Sprites in Viewport\", \"\", 20, 90, function () {\n            spritesInViewportText.text = \"Sprites in Viewport: \" + sceneGraph.scope().length;\n        });\n        let worldDimensionsText: TextToRender = new TextToRender(\"World Dimensions\", \"\", 20, 110, function () {\n            worldDimensionsText.text = \"World Dimensions (w, h): (\" + worldWidth + \", \" + worldHeight + \")\";\n        });\n        let textRenderer = game.getRenderingSystem().getTextRenderer();\n        textRenderer.addTextToRender(spritesInSceneText);\n        textRenderer.addTextToRender(viewportText);\n        textRenderer.addTextToRender(spritesInViewportText);\n        textRenderer.addTextToRender(worldDimensionsText);\n\n        // AND START THE GAME LOOP\n        game.start();\n    });","import { AnimatedSprite } from \"../scene/sprite/AnimatedSprite\";\nimport { SceneGraph } from \"../scene/SceneGraph\";\n\nexport enum State {\n    WALK = \"WALK\",\n    RUN = \"RUN\",\n    TURN_NORTH = \"TURN_NORTH\",\n    TURN_SOUTH = \"TURN_SOUTH\",\n    TURN_EAST = \"TURN_EAST\",\n    TURN_WEST = \"TURN_WEST\",\n    TURN_RAND = \"TURN_RAND\",\n    TURN_AROUND = \"TURN_AROUND\",\n    NONE = \"NONE\",\n}\n\nexport abstract class AIBehavior {\n\n    protected stateIndex: number;\n    protected pattern: State[];\n    protected scene: SceneGraph;\n\n\n    constructor(scene: SceneGraph) {\n        this.stateIndex = 0;\n        this.pattern = [];\n        this.scene = scene;\n    }\n\n    public setBehavior(pattern: State[]): void {\n        this.pattern = pattern;\n        this.stateIndex = 0;\n    }\n\n    public update(): State {\n        // console.group(\"AIBehavior.update()\")\n        // console.log(\"inital stateIndex\", this.stateIndex);\n        let state = this.pattern[this.stateIndex];\n        // console.log(\"state\", state);\n        this.stateIndex++;\n        // console.log(\"incremented stateIndex\", this.stateIndex)\n        if (this.stateIndex >= this.pattern.length) {\n            // console.log(\"no more states\");\n            this.stateIndex = 0;\n            // console.log(\"resetting stateIndex\", this.stateIndex)\n        }\n        // console.groupEnd();\n        return state;\n    }\n\n    abstract resolveState(sprite: AnimatedSprite): void;\n\n    abstract generatePattern(): State[];\n}\n\n","import { AIBehavior, State } from \"./AIBehavior\";\nimport { SceneGraph } from \"../scene/SceneGraph\";\nimport { AnimatedSprite } from \"../scene/sprite/AnimatedSprite\";\n\n\n\n\nexport class PaceRunAI extends AIBehavior {\n\n    private pacingBehavior: State[] = [State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.WALK, State.TURN_AROUND];\n\n    constructor(scene: SceneGraph) {\n        super(scene);\n        this.setBehavior(this.pacingBehavior);\n    }\n\n\n    public generatePattern(): State[] {\n        let pattern: State[] = [State.NONE];\n        return pattern;\n    }\n\n    public resolveState(sprite: AnimatedSprite): void {\n        let state = this.pattern[this.stateIndex];\n\n        let player: AnimatedSprite;\n        let playerInRange: boolean = false;\n        let nearSprites: AnimatedSprite[] = this.scene.spritesInRange(sprite.getPosition().getX() - 50, sprite.getPosition().getY() + 50, 100 + sprite.getSpriteType().getSpriteWidth());\n        for (let tempSprite of nearSprites) {\n            // console.log(tempSprite.getSpriteType().getSpriteSheetTexture().webGLTextureId);\n            if (tempSprite == this.scene.getPlayer()) {\n                player = tempSprite;\n                playerInRange = true;\n            }\n        }\n\n        // console.log(playerInRange);\n\n        if (playerInRange == true) {\n            if (player.getPosition().getX() < sprite.getPosition().getX()) {\n                sprite.setDirection(270);\n            }\n            if (player.getPosition().getX() > sprite.getPosition().getX()) {\n                sprite.setDirection(90);\n            }\n            if (player.getPosition().getY() < sprite.getPosition().getY()) {\n                sprite.setDirection(180);\n            }\n            if (player.getPosition().getY() > sprite.getPosition().getY()) {\n                sprite.setDirection(0);\n            }\n            this.setBehavior([State.RUN]);\n            state = this.pattern[this.stateIndex];\n        }\n\n        let worldWidth: number = this.scene.getTiledLayers()[0].getColumns() * this.scene.getTiledLayers()[0].getTileSet().getTileWidth();\n        let worldHeight: number = this.scene.getTiledLayers()[0].getRows() * this.scene.getTiledLayers()[0].getTileSet().getTileHeight();\n\n\n        if (state == State.WALK) {\n            if (sprite.getState() != \"WALKING\") {\n                sprite.setState(\"WALKING\");\n            }\n\n\n            // let newY: number = 0;\n            // let newX: number = 0;\n            // let xStop: boolean = false;\n            // let yStop: boolean = false;\n\n            // switch (sprite.getDirection()) {\n            //     case 0:\n            //         newY = (sprite.getPosition().getY() - 1);\n            //         break;\n            //     case 90:\n            //         newX = (sprite.getPosition().getX() - 1);\n            //         break;\n            //     case 180:\n            //         newY = (sprite.getPosition().getY() + 1);\n            //         break;\n            //     case 270:\n            //         newX = (sprite.getPosition().getX() + 1);\n            //         break;\n            //     default:\n            //         // console.error(\"illegal sprite direction\", sprite.getDirection());\n            //         break;\n            // }\n\n            // if (!(newX <= 0 || newX >= worldWidth)) {\n            //     sprite.getPosition().setX(newX);\n            // }\n            // if (!(newY <= 0 || newY >= worldHeight)) {\n            //     sprite.getPosition().setY(newY);\n            // }\n\n            if (sprite.getPosition().getX() <= 0) {\n                sprite.getPosition().setX(sprite.getPosition().getX() + 10)\n            }\n            if (sprite.getPosition().getX() >= worldWidth) {\n                sprite.getPosition().setX(sprite.getPosition().getX() - 10)\n            }\n            if (sprite.getPosition().getY() <= 0) {\n                sprite.getPosition().setY(sprite.getPosition().getY() + 10)\n            }\n            if (sprite.getPosition().getY() >= worldHeight) {\n                sprite.getPosition().setY(sprite.getPosition().getY() - 10)\n            }\n\n            switch (sprite.getDirection()) {\n                case 0:\n                    sprite.getPosition().setY(sprite.getPosition().getY() - 1);\n                    break;\n                case 90:\n                    sprite.getPosition().setX(sprite.getPosition().getX() - 1);\n                    break;\n                case 180:\n                    sprite.getPosition().setY(sprite.getPosition().getY() + 1);\n                    break;\n                case 270:\n                    sprite.getPosition().setX(sprite.getPosition().getX() + 1);\n                    break;\n                default:\n                    // console.error(\"illegal sprite direction\", sprite.getDirection());\n                    break;\n            }\n        } else if (state == State.TURN_AROUND) {\n            sprite.setDirection(sprite.getDirection() + 180);\n        } else if (state == State.RUN) {\n            switch (sprite.getDirection()) {\n                case 0:\n                    sprite.getPosition().setY(sprite.getPosition().getY() - 2);\n                    break;\n                case 90:\n                    sprite.getPosition().setX(sprite.getPosition().getX() - 2);\n                    break;\n                case 180:\n                    sprite.getPosition().setY(sprite.getPosition().getY() + 2);\n                    break;\n                case 270:\n                    sprite.getPosition().setX(sprite.getPosition().getX() + 2);\n                    break;\n                default:\n                    // console.error(\"illegal sprite direction\", sprite.getDirection());\n                    break;\n            }\n            if (playerInRange == false) {\n                sprite.setDirection(sprite.getDirection() + 90);\n                this.setBehavior(this.pacingBehavior);\n            }\n        }\n    }\n}","import { AIBehavior, State } from \"./AIBehavior\";\nimport { SceneGraph } from \"../scene/SceneGraph\";\nimport { AnimatedSprite } from \"../scene/sprite/AnimatedSprite\";\n\n\n\n\nexport class PlayerAI extends AIBehavior {\n\n    // private flip: boolean = false;\n\n    constructor(scene: SceneGraph) {\n        super(scene);\n        this.setBehavior([State.WALK]);\n    }\n\n\n    public generatePattern(): State[] {\n        let pattern: State[] = [State.NONE];\n        return pattern;\n    }\n\n    public resolveState(sprite: AnimatedSprite): void {\n        let state = this.pattern[this.stateIndex];\n\n        let targetX: number = this.scene.getMouse()[0] - (sprite.getSpriteType().getSpriteWidth() / 2);\n        let targetY: number = this.scene.getMouse()[1] - (sprite.getSpriteType().getSpriteHeight() / 2);\n\n        let deltaX: number = targetX - sprite.getPosition().getX();\n        let deltaY: number = targetY - sprite.getPosition().getY();\n\n        let worldWidth: number = this.scene.getTiledLayers()[0].getColumns() * this.scene.getTiledLayers()[0].getTileSet().getTileWidth();\n        let worldHeight: number = this.scene.getTiledLayers()[0].getRows() * this.scene.getTiledLayers()[0].getTileSet().getTileHeight();\n\n        if (Math.abs(deltaX) <= 6 && Math.abs(deltaY) <= 6) {\n            state = State.NONE;\n        }\n\n        if (state == State.WALK) {\n            if (sprite.getState() != \"WALKING\") {\n                sprite.setState(\"WALKING\");\n            }\n            if (sprite.getPosition().getX() <= 0) {\n                sprite.getPosition().setX(sprite.getPosition().getX() + 10)\n            }\n            if (sprite.getPosition().getX() >= worldWidth) {\n                sprite.getPosition().setX(sprite.getPosition().getX() - 10)\n            }\n            if (sprite.getPosition().getY() <= 0) {\n                sprite.getPosition().setY(sprite.getPosition().getY() + 10)\n            }\n            if (sprite.getPosition().getY() >= worldHeight) {\n                sprite.getPosition().setY(sprite.getPosition().getY() - 10)\n            }\n\n            let delta1: number = deltaX;\n            let delta2: number = deltaY;\n\n            if (delta1 > 6) {\n                sprite.setDirection(270);\n                sprite.getPosition().setX(sprite.getPosition().getX() + 3);\n            } else if (delta1 < -6) {\n                sprite.setDirection(90);\n                sprite.getPosition().setX(sprite.getPosition().getX() - 3);\n            } else if (delta2 > 6) {\n                sprite.setDirection(180);\n                sprite.getPosition().setY(sprite.getPosition().getY() + 3);\n            } else if (delta2 < -6) {\n                sprite.setDirection(0);\n                sprite.getPosition().setY(sprite.getPosition().getY() - 3);\n            }\n\n\n\n        } else if (state == State.NONE) {\n            this.setBehavior([State.NONE]);\n            if (sprite.getState() != \"IDLE\") {\n                sprite.setState(\"IDLE\");\n            }\n            // this.flip = (Math.floor(Math.random() * 3) == 1);\n        }\n    }\n}","import { AIBehavior } from \"./AIBehavior\";\nimport { SceneGraph } from \"../scene/SceneGraph\";\nimport { State } from \"./AIBehavior\";\nimport { AnimatedSprite } from \"../scene/sprite/AnimatedSprite\";\n\n\n\nexport class RandomWalkAI extends AIBehavior {\n\n    constructor(scene: SceneGraph) {\n        super(scene);\n        this.setBehavior(this.generatePattern());\n    }\n\n\n    public generatePattern(): State[] {\n        let pattern: State[] = [];\n        for (let x = 0; x < 25 + Math.floor(Math.random() * 175); x++) {\n            pattern.push(State.WALK);\n        }\n        pattern.push(State.TURN_RAND);\n        return pattern;\n    }\n\n    public resolveState(sprite: AnimatedSprite): void {\n        let state = this.pattern[this.stateIndex];\n\n        let worldWidth: number = this.scene.getTiledLayers()[0].getColumns() * this.scene.getTiledLayers()[0].getTileSet().getTileWidth();\n        let worldHeight: number = this.scene.getTiledLayers()[0].getRows() * this.scene.getTiledLayers()[0].getTileSet().getTileHeight();\n\n\n        if (state == State.WALK) {\n            if (sprite.getState() != \"WALKING\") {\n                sprite.setState(\"WALKING\");\n            }\n            if (sprite.getPosition().getX() <= 0) {\n                sprite.getPosition().setX(sprite.getPosition().getX() + 10)\n            }\n            if (sprite.getPosition().getX() >= worldWidth) {\n                sprite.getPosition().setX(sprite.getPosition().getX() - 10)\n            }\n            if (sprite.getPosition().getY() <= 0) {\n                sprite.getPosition().setY(sprite.getPosition().getY() + 10)\n            }\n            if (sprite.getPosition().getY() >= worldHeight) {\n                sprite.getPosition().setY(sprite.getPosition().getY() - 10)\n            }\n\n            switch (sprite.getDirection()) {\n                case 0:\n                    sprite.getPosition().setY(sprite.getPosition().getY() - 1);\n                    break;\n                case 90:\n                    sprite.getPosition().setX(sprite.getPosition().getX() - 1);\n                    break;\n                case 180:\n                    sprite.getPosition().setY(sprite.getPosition().getY() + 1);\n                    break;\n                case 270:\n                    sprite.getPosition().setX(sprite.getPosition().getX() + 1);\n                    break;\n                default:\n                    // console.error(\"illegal sprite direction\", sprite.getDirection());\n                    break;\n            }\n        } else if (state == State.TURN_RAND) {\n            let tempRandNum = Math.floor(Math.random() * 2);\n            if (tempRandNum == 0) {\n                sprite.setDirection(sprite.getDirection() + 90);\n            } else {\n                sprite.setDirection(sprite.getDirection() + 270);\n            }\n        }\n    }\n\n\n}","/*\n * Game is the focal point of the application, it has 4 subsystems,\n * the resource manager, the scene graph, the rendering system, and\n * the UI controller. In addition it serves as the game loop, providing\n * both an update and draw function that is called on a schedule.\n */\nimport { GameLoopTemplate } from './loop/GameLoopTemplate'\nimport { WebGLGameRenderingSystem } from './rendering/WebGLGameRenderingSystem'\nimport { SceneGraph } from './scene/SceneGraph'\nimport { AnimatedSprite } from './scene/sprite/AnimatedSprite'\nimport { TiledLayer } from './scene/tiles/TiledLayer'\nimport { ResourceManager } from './files/ResourceManager'\nimport { UIController } from './ui/UIController'\nimport { Viewport } from './scene/Viewport'\n\nexport class Game extends GameLoopTemplate {\n    private resourceManager: ResourceManager;\n    private sceneGraph: SceneGraph;\n    private renderingSystem: WebGLGameRenderingSystem;\n    private uiController: UIController;\n\n    public constructor(gameCanvasId: string, textCanvasId: string) {\n        super();\n        this.resourceManager = new ResourceManager();\n        this.sceneGraph = new SceneGraph();\n        this.renderingSystem = new WebGLGameRenderingSystem(gameCanvasId, textCanvasId);\n        this.uiController = new UIController(gameCanvasId, this.sceneGraph);\n\n        // MAKE SURE THE SCENE GRAPH' S VIEWPORT IS PROPERLY SETUP\n        let viewportWidth: number = (<HTMLCanvasElement>document.getElementById(gameCanvasId)).width;\n        let viewportHeight: number = (<HTMLCanvasElement>document.getElementById(gameCanvasId)).height;\n        let viewport: Viewport = new Viewport(viewportWidth, viewportHeight);\n        this.sceneGraph.setViewport(viewport);\n    }\n\n    public getRenderingSystem(): WebGLGameRenderingSystem {\n        return this.renderingSystem;\n    }\n\n    public getResourceManager(): ResourceManager {\n        return this.resourceManager;\n    }\n\n    public getSceneGraph(): SceneGraph {\n        return this.sceneGraph;\n    }\n\n    public begin(): void {\n    }\n\n    /*\n     * This draws the game. Note that we are not currently using the \n     * interpolation value, but could once physics is involved.\n     */\n    public draw(interpolationPercentage: number): void {\n        // GET THE TILED LAYERS TO RENDER FROM THE SCENE GRAPH\n        let visibleLayers: Array<TiledLayer>;\n        visibleLayers = this.sceneGraph.getTiledLayers();\n\n        // GET THE VISIBLE SET FROM THE SCENE GRAPH\n        let visibleSprites: Array<AnimatedSprite>;\n        visibleSprites = <Array<AnimatedSprite>>this.sceneGraph.scope();\n\n        let viewport: Viewport = this.sceneGraph.getViewport();\n\n        // RENDER THE VISIBLE SET, WHICH SHOULD ALL BE RENDERABLE\n        this.renderingSystem.render(viewport, visibleLayers, visibleSprites);\n    }\n\n    /**\n     * Updates the scene.\n     */\n    public update(delta: number): void {\n        this.sceneGraph.update(delta);\n    }\n\n    /**\n     * Updates the FPS counter.\n     */\n    public end(fps: number, panic: boolean): void {\n        if (panic) {\n            var discardedTime = Math.round(this.resetFrameDelta());\n            console.warn('Main loop panicked, probably because the browser tab was put in the background. Discarding ' + discardedTime + 'ms');\n        }\n    }\n}","/*\n * ResourceManager.js\n *\n * This class is responsible for managing all shared resources. This means things\n * that may be needed by multiple game objects. In this application this means\n * textures for the purpose of GPU rendering and animated sprite types.\n */\nimport { SpriteTypeData, AnimationStateData } from './SpriteTypeData'\nimport { MapData, TiledLayerData, TiledLayerProperty, TileSetData } from './MapData'\nimport { SceneData, NamedPath } from './SceneData'\nimport { WebGLGameRenderingSystem } from '../rendering/WebGLGameRenderingSystem'\nimport { WebGLGameTexture } from '../rendering/WebGLGameTexture'\nimport { AnimatedSpriteType } from '../scene/sprite/AnimatedSpriteType'\nimport { SceneGraph } from '../scene/SceneGraph'\nimport { TiledLayer } from '../scene/tiles/TiledLayer'\nimport { TileSet } from '../scene/tiles/TileSet'\n\nexport class ResourceManager {\n    // GAME SHADER PROGRAM SOURCE CODE WILL BE LOADED HERE. NOTE THAT\n    // WE HAVE ONE MAP FOR MAPPING THE SHADER NAME TO THE SOURCE CODE\n    // AND ANOTHER FOR MAPPING THE SHADER NAME TO THE FILE PATH\n    private gameShadersSource: Map<string, string> = new Map();\n    private gameShadersSourcePaths: Map<string, string> = new Map();\n    private numShadersToLoad: number;\n    private numShadersLoaded: number;\n\n    // SPRITE TYPES\n    private gameSpriteTypes: Map<string, AnimatedSpriteType> = new Map();\n    private gameSpriteTypePaths: Map<string, string> = new Map();\n    private numSpriteTypesToLoad: number;\n    private numSpriteTypesLoaded: number;\n\n    // TILE SETS\n    private gameTileSets: Map<string, TileSet> = new Map();\n    private gameTileSetPaths: Map<string, string> = new Map();\n    private numTileSetsToLoad: number;\n    private numTileSetsLoaded: number;\n\n    // GAME TEXTURES \n    private gameTextures: Map<string, WebGLGameTexture> = new Map();\n    private numTexturesToLoad: number;\n    private numTexturesLoaded: number;\n\n    public constructor() { }\n\n    // ACCESSOR METHODS\n\n    public getShaderSource(shaderName: string): string {\n        return this.gameShadersSource.get(shaderName);\n    }\n\n    public getAnimatedSpriteType(spriteTypeName: string): AnimatedSpriteType {\n        return this.gameSpriteTypes.get(spriteTypeName);\n    }\n\n    public getTileSet(tileSetName: string): TileSet {\n        return this.gameTileSets.get(tileSetName);\n    }\n\n    public getTexture(texturePath: string): WebGLGameTexture {\n        return this.gameTextures.get(texturePath);\n    }\n\n    public clear() : void {\n        // CLEAR THE SHADER SOURCE \n        this.gameShadersSource.clear();\n        this.gameShadersSourcePaths.clear();\n\n        // CLEAR THE SPRITE TYPES\n        this.gameSpriteTypes.clear();\n        this.gameSpriteTypePaths.clear();\n\n        // CLEAR THE TEXTURES\n        this.gameTextures.clear();\n\n        // WE REALLY SHOULD ADD FUNCTIONALITY TO REMOVE\n        // ALL THE RESOURCES FROM THE GPU ONE BY ONE\n        // BUT THAT'S SOMETHING FOR THE FUTURE\n    }\n\n    /**\n     * loadScene is responsible for loading all the external files needed for\n     * playing the game. These will be used for loading the scene, maps,\n     * animated sprites, textures, and shaders.\n     */\n    public loadScene(   scenePath: string,\n                        sceneGraph: SceneGraph,\n                        renderingSystem: WebGLGameRenderingSystem,\n                        callback: Function): void {\n        // CLEAR THE SCENE GRAPH TO GET RID OF ALL THE OLD STUFF\n        // THAT MAY HAVE BEEN LOADED FOR SOME OTHER LEVEL\n        sceneGraph.clear();\n\n        // CLEAR ALL THE SCENE RESOURCES \n        this.clear();\n\n        // WE HAVE OUR OWN CUSTOM JSON FILE FORMAT TO REPRESENT OUR SCENE\n        let thisResourceManager: ResourceManager = this;\n        this.loadTextFile(scenePath, function (jsonSceneText: string) {\n            let sceneData: SceneData = <SceneData>JSON.parse(jsonSceneText);\n            thisResourceManager.loadShadersSource(renderingSystem, sceneData.shaderSourcePaths, function () {\n                // NEXT LOAD THE MAP, WHICH WILL FORCE A LOADING OF\n                // ANY USED TILE SET TEXTURES AS WELL AS THE CREATION\n                // OF TILED LAYERS TO BE ADDED TO THE SCENE\n                thisResourceManager.loadMap(sceneData.mapPath, renderingSystem, sceneGraph, function () {\n                    // NOW THAT THE MAP HAS BEEN LOADED LOAD ALL THE SPRITE TYPES\n                    thisResourceManager.loadSpriteTypes(renderingSystem, sceneData.spriteTypePaths, function () {\n                        // NOW WE CAN INIT ALL SHADERS\n                        thisResourceManager.initAllShaders(renderingSystem, sceneGraph);\n\n                        callback();\n                    });\n                });\n            });\n        });\n    }\n\n    public initAllShaders(  renderingSystem: WebGLGameRenderingSystem,\n                            sceneGraph: SceneGraph): void {\n        // SETUP THE SPRITE RENDERER FOR USE WITH THE SPRITE SHADER THAT'S BEEN LOADED\n        let spriteRendererVertexShaderSource: string = this.getShaderSource(\"SPRITE_VERTEX_SHADER\");\n        let spriteRendererFragmentShaderSource: string = this.getShaderSource(\"SPRITE_FRAGMENT_SHADER\");\n        renderingSystem.getSpriteRenderer().init(renderingSystem.getWebGL(), spriteRendererVertexShaderSource, spriteRendererFragmentShaderSource, null);\n\n        // SETUP THE TILED LAYER RENDERER FOR USE WITH THE TILED SHADER THAT'S BEEN LOADED\n        let tiledLayerVertexShaderSource: string = this.getShaderSource(\"TILED_LAYER_VERTEX_SHADER\");\n        let tiledLayerFragmentShaderSource: string = this.getShaderSource(\"TILED_LAYER_FRAGMENT_SHADER\");\n        renderingSystem.getTiledLayerRenderer().init(renderingSystem.getWebGL(), tiledLayerVertexShaderSource, tiledLayerFragmentShaderSource, sceneGraph.getTiledLayers());\n    }\n\n    public loadShadersSource(   renderingSystem: WebGLGameRenderingSystem,\n                                namedPaths: Array<NamedPath>,\n                                callback: Function): void {\n        // START BY LOADING ALL THE SHADER SOURCE FILES THESE CAN THEN BE\n        // RETRIEVED LATER BY THE RENDERERS WHEN ITS TIME TO BUILD THE \n        // SHADER PROGRAMS\n        let thisResourceManager: ResourceManager = this;\n        this.numShadersLoaded = 0;\n        this.numShadersToLoad = namedPaths.length;\n        for (let i: number = 0; i < namedPaths.length; i++) {\n            let namedPath: NamedPath = namedPaths[i];\n            let shaderName: string = namedPath.name;\n            let shaderPath: string = namedPath.path;\n            this.loadTextFile(shaderPath, function (shaderSourceCode: string) {\n                thisResourceManager.gameShadersSource.set(shaderName, shaderSourceCode);\n                thisResourceManager.gameShadersSourcePaths.set(shaderName, shaderPath);\n                thisResourceManager.completeLoadingShader(function () {\n                    // ALL SOURCE CODE IS LOADED SO DO WHAT'S NEXT\n                    callback();\n                });\n            });\n        }\n    }\n\n    public buildPathToFileInSameDirectory(baseFileWithPath : string, targetFileName : string) : string {\n        let lastIndexOfSlash: number = baseFileWithPath.lastIndexOf('/');\n        let targetFilePath : string = \"./\";\n        if (lastIndexOfSlash > 0)\n            targetFilePath = baseFileWithPath.substring(0, lastIndexOfSlash);\n        targetFilePath += \"/\" + targetFileName;\n        return targetFilePath;\n    }\n\n    public loadMap( mapPath: string,\n                    renderingSystem: WebGLGameRenderingSystem,\n                    sceneGraph: SceneGraph,\n                    callback: Function): void {\n        let thisResourceManager: ResourceManager = this;\n        this.loadTextFile(mapPath, function (jsonMapText: string) {\n            let mapData: MapData = <MapData>JSON.parse(jsonMapText);\n\n            // WE ONLY USE ONE TILE SET\n            let tilesetFileName: string = mapData.tilesets[0].image;\n            let tilesetFilePath = thisResourceManager.buildPathToFileInSameDirectory(mapPath, tilesetFileName);\n\n            // USE THE PATHS TOLOAD THE TILE SET TEXTURES\n            thisResourceManager.loadTexture(tilesetFilePath, renderingSystem, function (tilesetTexture : WebGLGameTexture) {\n                // NOW THAT THE TILE SET TEXTURES HAVE BEEN LOADED,\n                // LOAD ALL THEIR ASSOCIATED TILESET DATA\n                for (let i = 0; i < mapData.tilesets.length; i++) {\n                    let tileSetData : TileSetData = mapData.tilesets[i];\n                    let rows : number = Math.ceil(tileSetData.tilecount/tileSetData.columns);\n                    let tileSetToAdd : TileSet = new TileSet(\n                                                    tileSetData.name,\n                                                    tileSetData.columns,\n                                                    rows,\n                                                    tileSetData.tilewidth,\n                                                    tileSetData.tileheight,\n                                                    tileSetData.spacing,\n                                                    tileSetData.imagewidth,\n                                                    tileSetData.imageheight,\n                                                    tileSetData.firstgid - 1,\n                                                    tilesetTexture);                    \n                    thisResourceManager.gameTileSets.set(tileSetToAdd.getName(), tileSetToAdd);\n                }\n\n                // AND NOW THAT THE TILE SETS HAVE BEEN LOADED\n                // WE CAN LOAD THE MAP'S TILED LAYERS, THOUGH NOTE\n                // IN THIS EXAMPLE WE ARE GOING TO KEEP IT SIMPLE\n                // AND ASSUME THERE IS ONLY ONE TILE SET\n                for (let i = 0; i < mapData.layers.length; i++) {\n                    let layerData : TiledLayerData = mapData.layers[i];\n\n                    // THIS LINE OF CODE IS FUNKY, WE CAN ONLY DO THIS WITH A SINGLE TILE SET,\n                    // SO TO MAKE THIS A REAL GAME ENGINE THIS WOULD NEED TO BE FIXED\n                    let layerTileSet : TileSet = thisResourceManager.gameTileSets.values().next().value;\n\n                    // WE ARE ASSUMING EACH LAYER USES JUST ONE TILE SET, WHICH MIGHT NOT\n                    // NECESSARILY BE TRUE. BUT FOR NOW, LET'S JUST MAKE THE LAYERS ALL\n                    // USING THE SAME TILE SET, ADD THE TILES, AND THEN ADD THEM TO THE SCENE GRAPH\n                    let tiledLayer : TiledLayer = new TiledLayer(layerData.width, layerData.height,layerTileSet);\n                    for (let j = 0; j < layerData.data.length; j++) {\n                        let tileIndex : number = layerData.data[j] - 1;\n                        tiledLayer.addTile(tileIndex);\n                    }\n                    sceneGraph.addLayer(tiledLayer);\n                }\n\n                callback();\n            });\n        });\n    }\n\n    /*\n     * Loads the texturePath file argument and once\n     * that is done it calls the callback function.\n     */\n    public loadTexture(texturePath: string,\n        renderingSystem: WebGLGameRenderingSystem,\n        callback: Function): void {\n        let thisResourceManager = this;\n        thisResourceManager.loadImage(texturePath, function (path: string, image: HTMLImageElement) {\n            let textureToLoad: WebGLGameTexture = new WebGLGameTexture();\n            let id: number = thisResourceManager.gameTextures.size;\n            thisResourceManager.gameTextures.set(path, textureToLoad);\n            renderingSystem.initWebGLTexture(textureToLoad, id, image, function () {\n                callback(textureToLoad);\n            });\n        });\n    }\n\n    /*\n     * Loads all the sprite types listed in the spriteTypePaths argument and once\n     * that is done it calls the callback function.\n     */\n    public loadSpriteTypes( renderingSystem : WebGLGameRenderingSystem,\n                            spriteTypePaths: Array<NamedPath>,\n                            callback: Function): void {\n        // THEN LOAD THE TEXTURES WE'LL BE USING\n        this.numSpriteTypesToLoad = spriteTypePaths.length;\n        this.numSpriteTypesLoaded = 0;\n        let thisResourceManager = this;\n        for (let namedPath of spriteTypePaths) {\n            let name: string = namedPath.name;\n            let path: string = namedPath.path;\n            this.loadSpriteType(renderingSystem, name, path, function () {\n                thisResourceManager.completeLoadingSpriteType(callback);\n            });\n        }\n    }\n\n    // PRIVATE HELPER METHODS\n\n    // LOADS A NEW JSON FILE AND UPON COMPLETION CALLS THE callback FUNCTION\n    private loadTextFile(textFilePath: string, callback: Function): void {\n        let xobj: XMLHttpRequest = new XMLHttpRequest();\n        xobj.overrideMimeType(\"application/json\");\n        xobj.open('GET', textFilePath, true);\n        xobj.onreadystatechange = function () {\n            if ((xobj.readyState == 4) && (xobj.status == 200)) {\n                callback(xobj.responseText);\n            }\n        };\n        xobj.send(null);\n    }\n\n    // CHECKS TO SEE IF ALL SHADER LOADING IS COMPLETE, IF YES, callback IS INVOKED\n    private completeLoadingShader(callback: Function): void {\n        this.numShadersLoaded++;\n        if (this.numShadersLoaded === this.numShadersToLoad) {\n            callback();\n        }\n    }\n\n    // CHECKS TO SEE IF ALL SPRITE TYPE LOADING IS COMPLETE, IF YES, callback IS INVOKED\n    private completeLoadingSpriteType(callback: Function): void {\n        this.numSpriteTypesLoaded++;\n        if (this.numSpriteTypesLoaded === this.numSpriteTypesToLoad) {\n            callback();\n        }\n    }\n\n    // CHECKS TO SEE IF ALL TEXTURE LOADING IS COMPLETE, IF YES, callback IS INVOKED\n    private completeLoadingTexture(callback: Function): void {\n        this.numTexturesLoaded++;\n        if (this.numTexturesLoaded === this.numTexturesToLoad) {\n            callback();\n        }\n    }\n\n    /**\n     * Loads an Image into RAM and once that process is complete it\n     * calls the callback method argument, presumably to then load\n     * it into GPU memory.\n     */\n    private loadImage(path: string, callback: Function): void {\n        // MAKE THE IMAGE\n        var image = new Image();\n\n        // ONCE THE IMAGE LOADING IS COMPLETED, THE CALLBACK WILL GET CALLED\n        image.onload = function () {\n            callback(path, image);\n        }\n\n        // START IMAGE LOADING\n        image.src = path;\n    }\n\n    /*\n     * This function loads a single sprite type resource from a JSON file and upon\n     * completion calls the callback function.\n     */\n    private loadSpriteType(renderingSystem : WebGLGameRenderingSystem, spriteTypeName: string, jsonFilePath: string, callback: Function): void {\n        let thisResourceManager: ResourceManager = this;\n        this.loadTextFile(jsonFilePath, function (jsonText: string) {\n            thisResourceManager.loadSpriteTypeData(renderingSystem, jsonFilePath, jsonText, function(spriteType : AnimatedSpriteType) {\n                thisResourceManager.gameSpriteTypes.set(spriteTypeName, spriteType);\n                thisResourceManager.gameSpriteTypePaths.set(spriteTypeName, jsonFilePath);\n                callback();\n            });\n        });\n    }\n\n    /*\n     * This helper function loads all the json text into an AnimatedSpriteType\n     * object and returns it.\n     */\n    private loadSpriteTypeData = (  renderingSystem : WebGLGameRenderingSystem, \n                                    spriteFilePath : string, \n                                    jsonText: string,\n                                    callback : Function): void => {\n        let jsonData: SpriteTypeData = <SpriteTypeData>JSON.parse(jsonText);\n        let texturePath : string = this.buildPathToFileInSameDirectory(spriteFilePath, jsonData.spriteSheetImage);\n        let thisResourceManager : ResourceManager = this;\n        this.loadTexture(texturePath, renderingSystem, function(spritesheetTexture : WebGLGameTexture) {\n            let spriteWidth: number = jsonData.spriteWidth;\n            let spriteHeight: number = jsonData.spriteHeight;\n            let animatedSpriteType = new AnimatedSpriteType(spritesheetTexture, spriteWidth, spriteHeight);\n            for (let i = 0; i < jsonData.animations.length; i++) {\n                let animation = <AnimationStateData>jsonData.animations[i];\n                animatedSpriteType.addAnimation(animation.name);\n                for (var j = 0; j < animation.frames.length; j++) {\n                    var frame = animation.frames[j];\n                    animatedSpriteType.addAnimationFrame(animation.name, frame.index, frame.duration);\n                }\n            }\n            callback(animatedSpriteType);\n        });\n    }\n}","export abstract class GameLoopTemplate {\n    // ALL INSTANCE VARIABLES WILL BE INITIALIZED VIA THE CONSTRUCTOR\n    private fps: number;\n    private simulationTimestep: number;\n    private frameDelta: number;\n    private lastFrameTimeMs: number;\n    private fpsAlpha: number;\n    private fpsUpdateInterval: number;\n    private lastFpsUpdate: number;\n    private framesSinceLastFpsUpdate: number;\n    private numUpdateSteps: number;\n    private minFrameDelay: number;\n    private running: boolean;\n    private started: boolean;\n    private panic: boolean;\n    private raf: number;\n\n    constructor() {\n        // An exponential moving average of the frames per second.\n        this.fps = 60;\n\n        // The amount of time (in milliseconds) to simulate each time update() runs.\n        // See `MainLoop.setSimulationTimestep()` for details.\n        this.simulationTimestep = 1000 / this.fps;\n\n        // The cumulative amount of in-app time that hasn't been simulated yet.\n        // See the comments inside animate() for details.\n        this.frameDelta = 0;\n\n        // The timestamp in milliseconds of the last time the main loop was run.\n        // Used to compute the time elapsed between frames.\n        this.lastFrameTimeMs = 0;\n\n        // A factor that affects how heavily to weight more recent seconds'\n        // performance when calculating the average frames per second. Valid values\n        // range from zero to one inclusive. Higher values result in weighting more\n        // recent seconds more heavily.\n        this.fpsAlpha = 0.9;\n\n        // The minimum duration between updates to the frames-per-second estimate.\n        // Higher values increase accuracy, but result in slower updates.\n        this.fpsUpdateInterval = 1000;\n\n        // The timestamp (in milliseconds) of the last time the `fps` moving\n        // average was updated.\n        this.lastFpsUpdate = 0;\n\n        // The number of frames delivered since the last time the `fps` moving\n        // average was updated (i.e. since `lastFpsUpdate`).\n        this.framesSinceLastFpsUpdate = 0;\n\n        // The number of times update() is called in a given frame. This is only\n        // relevant inside of animate(), but a reference is held externally so that\n        // this variable is not marked for garbage collection every time the main\n        // loop runs.\n        this.numUpdateSteps = 0;\n\n        // The minimum amount of time in milliseconds that must pass since the last\n        // frame was executed before another frame can be executed. The\n        // multiplicative inverse caps the FPS (the default of zero means there is\n        // no cap).\n        this.minFrameDelay = 0;\n\n        // Whether the main loop is running.\n        this.running = false;\n\n        // `true` if `MainLoop.start()` has been called and the most recent time it\n        // was called has not been followed by a call to `MainLoop.stop()`. This is\n        // different than `running` because there is a delay of a few milliseconds\n        // after `MainLoop.start()` is called before the application is considered\n        // \"running.\" This delay is due to waiting for the next frame.\n        this.started = false;\n\n        // Whether the simulation has fallen too far behind real time.\n        // Specifically, `panic` will be set to `true` if too many updates occur in\n        // one frame. This is only relevant inside of animate(), but a reference is\n        // held externally so that this variable is not marked for garbage\n        // collection every time the main loop runs.\n        this.panic = false;\n    }\n\n    /**\n     * Gets how many milliseconds should be simulated by every run of update().\n     *\n     * See `MainLoop.setSimulationTimestep()` for details on this value.\n     *\n     * @return {Number}\n     *   The number of milliseconds that should be simulated by every run of\n     *   {@link #setUpdate update}().\n     */\n    getSimulationTimestep(): number {\n        return this.simulationTimestep;\n    }\n\n    /**\n     * Sets how many milliseconds should be simulated by every run of update().\n     *\n     * The perceived frames per second (FPS) is effectively capped at the\n     * multiplicative inverse of the simulation timestep. That is, if the\n     * timestep is 1000 / 60 (which is the default), then the maximum perceived\n     * FPS is effectively 60. Decreasing the timestep increases the maximum\n     * perceived FPS at the cost of running {@link #setUpdate update}() more\n     * times per frame at lower frame rates. Since running update() more times\n     * takes more time to process, this can actually slow down the frame rate.\n     * Additionally, if the amount of time it takes to run update() exceeds or\n     * very nearly exceeds the timestep, the application will freeze and crash\n     * in a spiral of death (unless it is rescued; see `MainLoop.setEnd()` for\n     * an explanation of what can be done if a spiral of death is occurring).\n     *\n     * The exception to this is that interpolating between updates for each\n     * render can increase the perceived frame rate and reduce visual\n     * stuttering. See `MainLoop.setDraw()` for an explanation of how to do\n     * this.\n     *\n     * If you are considering decreasing the simulation timestep in order to\n     * raise the maximum perceived FPS, keep in mind that most monitors can't\n     * display more than 60 FPS. Whether humans can tell the difference among\n     * high frame rates depends on the application, but for reference, film is\n     * usually displayed at 24 FPS, other videos at 30 FPS, most games are\n     * acceptable above 30 FPS, and virtual reality might require 75 FPS to\n     * feel natural. Some gaming monitors go up to 144 FPS. Setting the\n     * timestep below 1000 / 144 is discouraged and below 1000 / 240 is\n     * strongly discouraged. The default of 1000 / 60 is good in most cases.\n     *\n     * The simulation timestep should typically only be changed at\n     * deterministic times (e.g. before the main loop starts for the first\n     * time, and not in response to user input or slow frame rates) to avoid\n     * introducing non-deterministic behavior. The update timestep should be\n     * the same for all players/users in multiplayer/multi-user applications.\n     *\n     * See also `MainLoop.getSimulationTimestep()`.\n     *\n     * @param {Number} timestep\n     *   The number of milliseconds that should be simulated by every run of\n     *   {@link #setUpdate update}().\n     */\n    setSimulationTimestep(timestep: number): void {\n        this.simulationTimestep = timestep;\n    }\n\n    /**\n     * Returns the exponential moving average of the frames per second.\n     *\n     * @return {Number}\n     *   The exponential moving average of the frames per second.\n     */\n    getFPS(): number {\n        return this.fps;\n    }\n\n    /**\n     * Gets the maximum frame rate.\n     *\n     * Other factors also limit the FPS; see `MainLoop.setSimulationTimestep`\n     * for details.\n     *\n     * See also `MainLoop.setMaxAllowedFPS()`.\n     *\n     * @return {Number}\n     *   The maximum number of frames per second allowed.\n     */\n    getMaxAllowedFPS(): number {\n        return 1000 / this.minFrameDelay;\n    }\n\n    /**\n     * Sets a maximum frame rate.\n     *\n     * See also `MainLoop.getMaxAllowedFPS()`.\n     *\n     * @param {Number} [fps=Infinity]\n     *   The maximum number of frames per second to execute. If Infinity or not\n     *   passed, there will be no FPS cap (although other factors do limit the\n     *   FPS; see `MainLoop.setSimulationTimestep` for details). If zero, this\n     *   will stop the loop, and when the loop is next started, it will return\n     *   to the previous maximum frame rate. Passing negative values will stall\n     *   the loop until this function is called again with a positive value.\n     *\n     * @chainable\n     */\n    setMaxAllowedFPS(fps: number): void {\n        if (typeof fps === 'undefined') {\n            fps = Infinity;\n        }\n        if (fps === 0) {\n            this.stop();\n        }\n        else {\n            // Dividing by Infinity returns zero.\n            this.minFrameDelay = 1000 / fps;\n        }\n    }\n\n    /**\n     * Reset the amount of time that has not yet been simulated to zero.\n     *\n     * This introduces non-deterministic behavior if called after the\n     * application has started running (unless it is being reset, in which case\n     * it doesn't matter). However, this can be useful in cases where the\n     * amount of time that has not yet been simulated has grown very large\n     * (for example, when the application's tab gets put in the background and\n     * the browser throttles the timers as a result). In applications with\n     * lockstep the player would get dropped, but in other networked\n     * applications it may be necessary to snap or ease the player/user to the\n     * authoritative state and discard pending updates in the process. In\n     * non-networked applications it may also be acceptable to simply resume\n     * the application where it last left off and ignore the accumulated\n     * unsimulated time.\n     *\n     * @return {Number}\n     *   The cumulative amount of elapsed time in milliseconds that has not yet\n     *   been simulated, but is being discarded as a result of calling this\n     *   function.\n     */\n    resetFrameDelta() : number {\n        var oldFrameDelta = this.frameDelta;\n        this.frameDelta = 0;\n        return oldFrameDelta;\n    }\n\n    /**\n     * Starts the main loop.\n     *\n     * Note that the application is not considered \"running\" immediately after\n     * this function returns; rather, it is considered \"running\" after the\n     * application draws its first frame. The distinction is that event\n     * handlers should remain paused until the application is running, even\n     * after `MainLoop.start()` is called. Check `MainLoop.isRunning()` for the\n     * current status. To act after the application starts, register a callback\n     * with requestAnimationFrame() after calling this function and execute the\n     * action in that callback. It is safe to call `MainLoop.start()` multiple\n     * times even before the application starts running and without calling\n     * `MainLoop.stop()` in between, although there is no reason to do this;\n     * the main loop will only start if it is not already started.\n     *\n     * See also `MainLoop.stop()`.\n     */\n    start(): void {\n        if (!this.started) {\n            // Since the application doesn't start running immediately, track\n            // whether this function was called and use that to keep it from\n            // starting the main loop multiple times.\n            this.started = true;\n\n            // In the main loop, draw() is called after update(), so if we\n            // entered the main loop immediately, we would never render the\n            // initial state before any updates occur. Instead, we run one\n            // frame where all we do is draw, and then start the main loop with\n            // the next frame.\n            this.raf = requestAnimationFrame(this.startLoop.bind(this));\n        }\n    }\n\n    startLoop(timestamp : number): void {\n        // Render the initial state before any updates occur.\n        this.draw(1);\n\n        // The application isn't considered \"running\" until the\n        // application starts drawing.\n        this.running = true;\n\n        // Reset variables that are used for tracking time so that we\n        // don't simulate time passed while the application was paused.\n        this.lastFrameTimeMs = timestamp;\n        this.lastFpsUpdate = timestamp;\n        this.framesSinceLastFpsUpdate = 0;\n\n        // Start the main loop.\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\n    }\n\n    /**\n     * Returns whether the main loop is currently running.\n     *\n     * See also `MainLoop.start()` and `MainLoop.stop()`.\n     *\n     * @return {Boolean}\n     *   Whether the main loop is currently running.\n     */\n    isRunning(): boolean {\n        return this.running;\n    }\n\n    /**\n     * Stops the main loop.\n     *\n     * Event handling and other background tasks should also be paused when the\n     * main loop is paused.\n     *\n     * Note that pausing in multiplayer/multi-user applications will cause the\n     * player's/user's client to become out of sync. In this case the\n     * simulation should exit, or the player/user needs to be snapped to their\n     * updated position when the main loop is started again.\n     *\n     * See also `MainLoop.start()` and `MainLoop.isRunning()`.\n     */\n    stop(): void {\n        this.running = false;\n        this.started = false;\n        window.cancelAnimationFrame(this.raf);\n    }\n\n    /**\n     * The main loop that runs updates and rendering.\n     * \n     * @param {DOMHighResTimeStamp} timestamp\n     * The current timestamp. In practice this is supplied by\n     * requestAnimationFrame at the time that it starts to fire callbacks. This\n     * should only be used for comparison to other timestamps because the epoch\n     * (i.e. the \"zero\" time) depends on the engine running this code. In engines\n     * that support `DOMHighResTimeStamp` (all modern browsers except iOS Safari\n     * 8) the epoch is the time the page started loading, specifically\n     * `performance.timing.navigationStart`. Everywhere else, including node.js,\n     * the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n     * \n     * @ignore\n     */\n    animate(timestamp : number): void {\n        // Run the loop again the next time the browser is ready to render.\n        // We set rafHandle immediately so that the next frame can be canceled\n        // during the current frame.\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\n\n        // Throttle the frame rate (if minFrameDelay is set to a non-zero value by\n        // `MainLoop.setMaxAllowedFPS()`).\n        if (timestamp < this.lastFrameTimeMs + this.minFrameDelay) {\n            return;\n        }\n\n        // frameDelta is the cumulative amount of in-app time that hasn't been\n        // simulated yet. Add the time since the last frame. We need to track total\n        // not-yet-simulated time (as opposed to just the time elapsed since the\n        // last frame) because not all actually elapsed time is guaranteed to be\n        // simulated each frame. See the comments below for details.\n        this.frameDelta += timestamp - this.lastFrameTimeMs;\n        this.lastFrameTimeMs = timestamp;\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setBegin()` for additional details on how to use this.\n        this.begin(timestamp, this.frameDelta);\n\n        // Update the estimate of the frame rate, `fps`. Approximately every\n        // second, the number of frames that occurred in that second are included\n        // in an exponential moving average of all frames per second. This means\n        // that more recent seconds affect the estimated frame rate more than older\n        // seconds.\n        if (timestamp > this.lastFpsUpdate + this.fpsUpdateInterval) {\n            // Compute the new exponential moving average.\n            this.fps =\n                // Divide the number of frames since the last FPS update by the\n                // amount of time that has passed to get the mean frames per second\n                // over that period. This is necessary because slightly more than a\n                // second has likely passed since the last update.\n                this.fpsAlpha * this.framesSinceLastFpsUpdate * 1000 / (timestamp - this.lastFpsUpdate) +\n                (1 - this.fpsAlpha) * this.fps;\n\n            // Reset the frame counter and last-updated timestamp since their\n            // latest values have now been incorporated into the FPS estimate.\n            this.lastFpsUpdate = timestamp;\n            this.framesSinceLastFpsUpdate = 0;\n        }\n        // Count the current frame in the next frames-per-second update. This\n        // happens after the previous section because the previous section\n        // calculates the frames that occur up until `timestamp`, and `timestamp`\n        // refers to a time just before the current frame was delivered.\n        this.framesSinceLastFpsUpdate++;\n\n        /*\n         * A naive way to move an object along its X-axis might be to write a main\n         * loop containing the statement `obj.x += 10;` which would move the object\n         * 10 units per frame. This approach suffers from the issue that it is\n         * dependent on the frame rate. In other words, if your application is\n         * running slowly (that is, fewer frames per second), your object will also\n         * appear to move slowly, whereas if your application is running quickly\n         * (that is, more frames per second), your object will appear to move\n         * quickly. This is undesirable, especially in multiplayer/multi-user\n         * applications.\n         *\n         * One solution is to multiply the speed by the amount of time that has\n         * passed between rendering frames. For example, if you want your object to\n         * move 600 units per second, you might write `obj.x += 600 * delta`, where\n         * `delta` is the time passed since the last frame. (For convenience, let's\n         * move this statement to an update() function that takes `delta` as a\n         * parameter.) This way, your object will move a constant distance over\n         * time. However, at low frame rates and high speeds, your object will move\n         * large distances every frame, which can cause it to do strange things\n         * such as move through walls. Additionally, we would like our program to\n         * be deterministic. That is, every time we run the application with the\n         * same input, we would like exactly the same output. If the time between\n         * frames (the `delta`) varies, our output will diverge the longer the\n         * program runs due to accumulated rounding errors, even at normal frame\n         * rates.\n         *\n         * A better solution is to separate the amount of time simulated in each\n         * update() from the amount of time between frames. Our update() function\n         * doesn't need to change; we just need to change the delta we pass to it\n         * so that each update() simulates a fixed amount of time (that is, `delta`\n         * should have the same value each time update() is called). The update()\n         * function can be run multiple times per frame if needed to simulate the\n         * total amount of time passed since the last frame. (If the time that has\n         * passed since the last frame is less than the fixed simulation time, we\n         * just won't run an update() until the the next frame. If there is\n         * unsimulated time left over that is less than our timestep, we'll just\n         * leave it to be simulated during the next frame.) This approach avoids\n         * inconsistent rounding errors and ensures that there are no giant leaps\n         * through walls between frames.\n         *\n         * That is what is done below. It introduces a new problem, but it is a\n         * manageable one: if the amount of time spent simulating is consistently\n         * longer than the amount of time between frames, the application could\n         * freeze and crash in a spiral of death. This won't happen as long as the\n         * fixed simulation time is set to a value that is high enough that\n         * update() calls usually take less time than the amount of time they're\n         * simulating. If it does start to happen anyway, see `MainLoop.setEnd()`\n         * for a discussion of ways to stop it.\n         *\n         * Additionally, see `MainLoop.setUpdate()` for a discussion of performance\n         * considerations.\n         *\n         * Further reading for those interested:\n         *\n         * - http://gameprogrammingpatterns.com/game-loop.html\n         * - http://gafferongames.com/game-physics/fix-your-timestep/\n         * - https://gamealchemist.wordpress.com/2013/03/16/thoughts-on-the-javascript-game-loop/\n         * - https://developer.mozilla.org/en-US/docs/Games/Anatomy\n         */\n        this.numUpdateSteps = 0;\n        while (this.frameDelta >= this.simulationTimestep) {\n            this.update(this.simulationTimestep);\n            this.frameDelta -= this.simulationTimestep;\n\n            /*\n             * Sanity check: bail if we run the loop too many times.\n             *\n             * One way this could happen is if update() takes longer to run than\n             * the time it simulates, thereby causing a spiral of death. For ways\n             * to avoid this, see `MainLoop.setEnd()`. Another way this could\n             * happen is if the browser throttles serving frames, which typically\n             * occurs when the tab is in the background or the device battery is\n             * low. An event outside of the main loop such as audio processing or\n             * synchronous resource reads could also cause the application to hang\n             * temporarily and accumulate not-yet-simulated time as a result.\n             *\n             * 240 is chosen because, for any sane value of simulationTimestep, 240\n             * updates will simulate at least one second, and it will simulate four\n             * seconds with the default value of simulationTimestep. (Safari\n             * notifies users that the script is taking too long to run if it takes\n             * more than five seconds.)\n             *\n             * If there are more updates to run in a frame than this, the\n             * application will appear to slow down to the user until it catches\n             * back up. In networked applications this will usually cause the user\n             * to get out of sync with their peers, but if the updates are taking\n             * this long already, they're probably already out of sync.\n             */\n            if (++this.numUpdateSteps >= 240) {\n                this.panic = true;\n                break;\n            }\n        }\n\n        /*\n         * Render the screen. We do this regardless of whether update() has run\n         * during this frame because it is possible to interpolate between updates\n         * to make the frame rate appear faster than updates are actually\n         * happening. See `MainLoop.setDraw()` for an explanation of how to do\n         * that.\n         *\n         * We draw after updating because we want the screen to reflect a state of\n         * the application that is as up-to-date as possible. (`MainLoop.start()`\n         * draws the very first frame in the application's initial state, before\n         * any updates have occurred.) Some sources speculate that rendering\n         * earlier in the requestAnimationFrame callback can get the screen painted\n         * faster; this is mostly not true, and even when it is, it's usually just\n         * a trade-off between rendering the current frame sooner and rendering the\n         * next frame later.\n         *\n         * See `MainLoop.setDraw()` for details about draw() itself.\n         */\n        this.draw(this.frameDelta / this.simulationTimestep);\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setEnd()` for additional details on how to use this.\n        this.end(this.fps, this.panic);\n\n        this.panic = false;\n    }\n\n    // SUBCLASSES MUST OVERRIDE FOUR REQUIRED METHODS:\n        // begin\n        // update\n        // draw\n        // end\n\n    /**\n     * A function that runs at the beginning of the main loop.\n     *\n     * The begin() function is typically used to process input before the\n     * updates run. Processing input here (in chunks) can reduce the running\n     * time of event handlers, which is useful because long-running event\n     * handlers can sometimes delay frames.\n     *\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\n     * frame, begin() always runs exactly once per frame. This makes it useful\n     * for any updates that are not dependent on time in the simulation.\n     * Examples include adjusting HUD calculations or performing long-running\n     * updates incrementally. Compared to {@link #setEnd end}(), generally\n     * actions should occur in begin() if they affect anything that\n     * {@link #setUpdate update}() or {@link #setDraw draw}() use.\n     *\n     * @param {Function} begin\n     *   The begin() function.\n     * @param {Number} [begin.timestamp]\n     *   The current timestamp (when the frame started), in milliseconds. This\n     *   should only be used for comparison to other timestamps because the\n     *   epoch (i.e. the \"zero\" time) depends on the engine running this code.\n     *   In engines that support `DOMHighResTimeStamp` (all modern browsers\n     *   except iOS Safari 8) the epoch is the time the page started loading,\n     *   specifically `performance.timing.navigationStart`. Everywhere else,\n     *   including node.js, the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n     * @param {Number} [begin.delta]\n     *   The total elapsed time that has not yet been simulated, in\n     *   milliseconds.\n     */\n    abstract begin(timestamp : number, delta : number) : void;\n\n    /**\n     * A function that runs updates (i.e. AI and physics).\n     *\n     * The update() function should simulate anything that is affected by time.\n     * It can be called zero or more times per frame depending on the frame\n     * rate.\n     *\n     * As with everything in the main loop, the running time of update()\n     * directly affects the frame rate. If update() takes long enough that the\n     * frame rate drops below the target (\"budgeted\") frame rate, parts of the\n     * update() function that do not need to execute between every frame can be\n     * moved into Web Workers. (Various sources on the internet sometimes\n     * suggest other scheduling patterns using setTimeout() or setInterval().\n     * These approaches sometimes offer modest improvements with minimal\n     * changes to existing code, but because JavaScript is single-threaded, the\n     * updates will still block rendering and drag down the frame rate. Web\n     * Workers execute in separate threads, so they free up more time in the\n     * main loop.)\n     *\n     * This script can be imported into a Web Worker using importScripts() and\n     * used to run a second main loop in the worker. Some considerations:\n     *\n     * - Profile your code before doing the work to move it into Web Workers.\n     *   It could be the rendering that is the bottleneck, in which case the\n     *   solution is to decrease the visual complexity of the scene.\n     * - It doesn't make sense to move the *entire* contents of update() into\n     *   workers unless {@link #setDraw draw}() can interpolate between frames.\n     *   The lowest-hanging fruit is background updates (like calculating\n     *   citizens' happiness in a city-building game), physics that doesn't\n     *   affect the scene (like flags waving in the wind), and anything that is\n     *   occluded or happening far off screen.\n     * - If draw() needs to interpolate physics based on activity that occurs\n     *   in a worker, the worker needs to pass the interpolation value back to\n     *   the main thread so that is is available to draw().\n     * - Web Workers can't access the state of the main thread, so they can't\n     *   directly modify objects in your scene. Moving data to and from Web\n     *   Workers is a pain. The fastest way to do it is with Transferable\n     *   Objects: basically, you can pass an ArrayBuffer to a worker,\n     *   destroying the original reference in the process.\n     *\n     * You can read more about Web Workers and Transferable Objects at\n     * [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/workers/basics/).\n     *\n     * @param {Function} update\n     *   The update() function.\n     * @param {Number} [update.delta]\n     *   The amount of time in milliseconds to simulate in the update. In most\n     *   cases this timestep never changes in order to ensure deterministic\n     *   updates. The timestep is the same as that returned by\n     *   `MainLoop.getSimulationTimestep()`.\n     */\n    abstract update(timeStep : number) : void;\n\n    /**\n     * A function that draws things on the screen.\n     *\n     * The draw() function gets passed the percent of time that the next run of\n     * {@link #setUpdate update}() will simulate that has actually elapsed, as\n     * a decimal. In other words, draw() gets passed how far between update()\n     * calls it is. This is useful because the time simulated by update() and\n     * the time between draw() calls is usually different, so the parameter to\n     * draw() can be used to interpolate motion between frames to make\n     * rendering appear smoother. To illustrate, if update() advances the\n     * simulation at each vertical bar in the first row below, and draw() calls\n     * happen at each vertical bar in the second row below, then some frames\n     * will have time left over that is not yet simulated by update() when\n     * rendering occurs in draw():\n     *\n     *     update() timesteps:  |  |  |  |  |  |  |  |  |\n     *     draw() calls:        |   |   |   |   |   |   |\n     *\n     * To interpolate motion for rendering purposes, objects' state after the\n     * last update() must be retained and used to calculate an intermediate\n     * state. Note that this means renders will be up to one update() behind.\n     * This is still better than extrapolating (projecting objects' state after\n     * a future update()) which can produce bizarre results. Storing multiple\n     * states can be difficult to set up, and keep in mind that running this\n     * process takes time that could push the frame rate down, so it's often\n     * not worthwhile unless stuttering is visible.\n     *\n     * @param {Function} draw\n     *   The draw() function.\n     * @param {Number} [draw.interpolationPercentage]\n     *   The cumulative amount of time that hasn't been simulated yet, divided\n     *   by the amount of time that will be simulated the next time update()\n     *   runs. Useful for interpolating frames.\n     */\n    public abstract draw(interpolationPercentage : number) : void;\n\n    /**\n     * A function that runs at the end of the main loop.\n     *\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\n     * frame, end() always runs exactly once per frame. This makes it useful\n     * for any updates that are not dependent on time in the simulation.\n     * Examples include cleaning up any temporary state set up by\n     * {@link #setBegin begin}(), lowering the visual quality if the frame rate\n     * is too low, or performing long-running updates incrementally. Compared\n     * to begin(), generally actions should occur in end() if they use anything\n     * that update() or {@link #setDraw draw}() affect.\n     *\n     * @param {Function} end\n     *   The end() function.\n     * @param {Number} [end.fps]\n     *   The exponential moving average of the frames per second. This is the\n     *   same value returned by `MainLoop.getFPS()`. It can be used to take\n     *   action when the FPS is too low (or to restore to normalcy if the FPS\n     *   moves back up). Examples of actions to take if the FPS is too low\n     *   include exiting the application, lowering the visual quality, stopping\n     *   or reducing activities outside of the main loop like event handlers or\n     *   audio playback, performing non-critical updates less frequently, or\n     *   increasing the simulation timestep (by calling\n     *   `MainLoop.setSimulationTimestep()`). Note that this last option\n     *   results in more time being simulated per update() call, which causes\n     *   the application to behave non-deterministically.\n     * @param {Boolean} [end.panic=false]\n     *   Indicates whether the simulation has fallen too far behind real time.\n     *   Specifically, `panic` will be `true` if too many updates occurred in\n     *   one frame. In networked lockstep applications, the application should\n     *   wait for some amount of time to see if the user can catch up before\n     *   dropping the user. In networked but non-lockstep applications, this\n     *   typically indicates that the user needs to be snapped or eased to the\n     *   current authoritative state. When this happens, it may be convenient\n     *   to call `MainLoop.resetFrameDelta()` to discard accumulated pending\n     *   updates. In non-networked applications, it may be acceptable to allow\n     *   the application to keep running for awhile to see if it will catch up.\n     *   However, this could also cause the application to look like it is\n     *   running very quickly for a few frames as it transitions through the\n     *   intermediate states. An alternative that may be acceptable is to\n     *   simply ignore the unsimulated elapsed time by calling\n     *   `MainLoop.resetFrameDelta()` even though this introduces\n     *   non-deterministic behavior. In all cases, if the application panics\n     *   frequently, this is an indication that the main loop is running too\n     *   slowly. However, most of the time the drop in frame rate will probably\n     *   be noticeable before a panic occurs. To help the application catch up\n     *   after a panic caused by a spiral of death, the same steps can be taken\n     *   that are suggested above if the FPS drops too low.\n     */\n    abstract end(fps : number, panic : boolean) : void;\n}","/*\n * MathUtilities provides a number of services for rendering using 4x4 matrices, like\n * transformting (i.e. translation, rotation, and scaling) 3d or 2d points from world\n * coordinate systems to screen coordinate systems.\n */\nimport {Matrix} from './Matrix'\nimport {Vector3} from './Vector3'\n\nexport namespace MathUtilities {\n    export function determinant4x4(result : Matrix) : number {\n        let det0 = result.get(0, 0) * (\n            (result.get(1, 1) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\n            - (result.get(1, 2) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\n            + (result.get(1, 3) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(3, 1) * result.get(2, 2)))));\n        let det1 = result.get(0, 1) * (\n            (result.get(1, 0) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\n            - (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(3, 0) * result.get(2, 3))))\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(3, 0) * result.get(2, 2)))));\n        let det2 = result.get(0, 2) * (\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 0))))\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\n        let det3 = result.get(0, 3) * (\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 1))))\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 0))))\n            + (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\n        let det = det0 - det1 + det2 - det3;\n        console.log(\"det = \" + det0 + \" + \" + det1 + \" + \" + det2 + \" + \" + det3);\n        return det;\n    }\n    export function identity(result : Matrix) : void {\n        if (result.getRows() === result.getColumns()) {\n            for (let i = 0; i < result.getRows(); i++) {\n                for (let j = 0; j < result.getColumns(); j++) {\n                    if (i === j)\n                        result.set(1.0, i, j);\n                    else\n                        result.set(0.0, i, j);\n                }\n            }\n        }\n    }\n    export function inverse(result : Matrix, mat : Matrix) : void {\n        let det = this.determinant(mat);\n        let m00 = mat.get(0, 0); let m01 = mat.get(0, 1); let m02 = mat.get(0, 2); let m03 = mat.get(0, 3);\n        let m10 = mat.get(1, 0); let m11 = mat.get(1, 1); let m12 = mat.get(1, 2); let m13 = mat.get(1, 3);\n        let m20 = mat.get(2, 0); let m21 = mat.get(2, 1); let m22 = mat.get(2, 2); let m23 = mat.get(2, 3);\n        let m30 = mat.get(3, 0); let m31 = mat.get(3, 1); let m32 = mat.get(3, 2); let m33 = mat.get(3, 3);\n        let temp = new Matrix(4, 4);\n        temp.set((m12 * m23 * m31) - (m13 * m22 * m31) + (m13 * m21 * m32) - (m11 * m23 * m32) - (m12 * m21 * m33) + (m11 * m22 * m33), 0, 0);\n        temp.set((m03 * m22 * m31) - (m02 * m23 * m31) - (m03 * m21 * m32) + (m01 * m23 * m32) + (m02 * m21 * m33) - (m01 * m22 * m33), 0, 1);\n        temp.set((m02 * m13 * m31) - (m03 * m12 * m31) + (m03 * m11 * m32) - (m01 * m13 * m32) - (m02 * m11 * m33) + (m01 * m12 * m33), 0, 2);\n        temp.set((m03 * m12 * m21) - (m02 * m13 * m21) - (m03 * m11 * m22) + (m01 * m13 * m22) + (m02 * m11 * m23) - (m01 * m12 * m23), 0, 3);\n        temp.set((m13 * m22 * m30) - (m12 * m23 * m30) - (m13 * m20 * m32) + (m10 * m23 * m32) + (m12 * m20 * m33) - (m10 * m22 * m33), 1, 0);\n        temp.set((m02 * m23 * m30) - (m03 * m22 * m30) + (m03 * m20 * m32) - (m00 * m23 * m32) - (m02 * m20 * m33) + (m00 * m22 * m33), 1, 1);\n        temp.set((m03 * m12 * m30) - (m02 * m13 * m30) - (m03 * m10 * m32) + (m00 * m13 * m32) + (m02 * m10 * m33) - (m00 * m12 * m33), 1, 2);\n        temp.set((m02 * m13 * m20) - (m03 * m12 * m20) + (m03 * m10 * m22) - (m00 * m13 * m22) - (m02 * m10 * m23) + (m00 * m12 * m23), 1, 3);\n        temp.set((m11 * m23 * m30) - (m13 * m21 * m30) + (m13 * m20 * m31) - (m10 * m23 * m31) - (m11 * m20 * m33) + (m10 * m21 * m33), 2, 0);\n        temp.set((m03 * m21 * m30) - (m01 * m23 * m30) - (m03 * m20 * m31) + (m00 * m23 * m31) + (m01 * m20 * m33) - (m00 * m21 * m33), 2, 1);\n        temp.set((m01 * m13 * m30) - (m03 * m11 * m30) + (m03 * m10 * m31) - (m00 * m13 * m31) - (m01 * m10 * m33) + (m00 * m11 * m33), 2, 2);\n        temp.set((m03 * m11 * m20) - (m01 * m13 * m20) - (m03 * m10 * m21) + (m00 * m13 * m21) + (m01 * m10 * m23) - (m00 * m11 * m23), 2, 3);\n        temp.set((m12 * m21 * m30) - (m11 * m22 * m30) - (m12 * m20 * m31) + (m10 * m22 * m31) + (m11 * m20 * m32) - (m10 * m21 * m32), 3, 0);\n        temp.set((m01 * m22 * m30) - (m02 * m21 * m30) + (m02 * m20 * m31) - (m00 * m22 * m31) - (m01 * m20 * m32) + (m00 * m21 * m32), 3, 1);\n        temp.set((m02 * m11 * m30) - (m01 * m12 * m30) - (m02 * m10 * m31) + (m00 * m12 * m31) + (m01 * m10 * m32) - (m00 * m11 * m32), 3, 2);\n        temp.set((m01 * m12 * m20) - (m02 * m11 * m20) + (m02 * m10 * m21) - (m00 * m12 * m21) - (m01 * m10 * m22) + (m00 * m11 * m22), 3, 3);\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                result.set(temp.get(i, j) / det, i, j);\n            }\n        }\n    }\n    export function model(result : Matrix, translation : Vector3, rotation : Vector3, scale : Vector3) : void {\n        // TRANSLATION MATRIX\t\n        let translationMatrix = new Matrix(4, 4);\n        this.identity(translationMatrix);\n        this.translate(translationMatrix, translation);\n\n        // ROTATION MATRIX\n        let rotationMatrix = new Matrix(4, 4);\n        this.identity(rotationMatrix);\n        this.rotate(rotationMatrix, rotation);\n\n        // SCALING MATRIX\n        let scaleMatrix = new Matrix(4, 4);\n        this.identity(scaleMatrix);\n        this.scale(scaleMatrix, scale);\n\n        // AND NOW MULTIPLY THEM TOGETHER IN THE CORRECT ORDER\n        let tempMatrix = new Matrix(4, 4);\n        this.multiply(tempMatrix, translationMatrix, rotationMatrix);\n        this.multiply(result, tempMatrix, scaleMatrix);\n    }\n\n    export function multiply(result : Matrix, mat0 : Matrix, mat1 : Matrix) : void {\n        // result MIGHT BE mat0 OR mat1 SO IT'S BEST IF WE\n        // CALCULATE TEMP VALUES FIRST BEFORE ASSIGNMENT\n        let r00 = (mat0.get(0, 0) * mat1.get(0, 0))\n            + (mat0.get(0, 1) * mat1.get(1, 0))\n            + (mat0.get(0, 2) * mat1.get(2, 0))\n            + (mat0.get(0, 3) * mat1.get(3, 0));\n        let r10 = (mat0.get(1, 0) * mat1.get(0, 0))\n            + (mat0.get(1, 1) * mat1.get(1, 0))\n            + (mat0.get(1, 2) * mat1.get(2, 0))\n            + (mat0.get(1, 3) * mat1.get(3, 0));\n        let r20 = (mat0.get(2, 0) * mat1.get(0, 0))\n            + (mat0.get(2, 1) * mat1.get(1, 0))\n            + (mat0.get(2, 2) * mat1.get(2, 0))\n            + (mat0.get(2, 3) * mat1.get(3, 0));\n        let r30 = (mat0.get(3, 0) * mat1.get(0, 0))\n            + (mat0.get(3, 1) * mat1.get(1, 0))\n            + (mat0.get(3, 2) * mat1.get(2, 0))\n            + (mat0.get(3, 3) * mat1.get(3, 0));\n        let r01 = (mat0.get(0, 0) * mat1.get(0, 1))\n            + (mat0.get(0, 1) * mat1.get(1, 1))\n            + (mat0.get(0, 2) * mat1.get(2, 1))\n            + (mat0.get(0, 3) * mat1.get(3, 1));\n        let r11 = (mat0.get(1, 0) * mat1.get(0, 1))\n            + (mat0.get(1, 1) * mat1.get(1, 1))\n            + (mat0.get(1, 2) * mat1.get(2, 1))\n            + (mat0.get(1, 3) * mat1.get(3, 1));\n        let r21 = (mat0.get(2, 0) * mat1.get(0, 1))\n            + (mat0.get(2, 1) * mat1.get(1, 1))\n            + (mat0.get(2, 2) * mat1.get(2, 1))\n            + (mat0.get(2, 3) * mat1.get(3, 1));\n        let r31 = (mat0.get(3, 0) * mat1.get(0, 1))\n            + (mat0.get(3, 1) * mat1.get(1, 1))\n            + (mat0.get(3, 2) * mat1.get(2, 1))\n            + (mat0.get(3, 3) * mat1.get(3, 1));\n        let r02 = (mat0.get(0, 0) * mat1.get(0, 2))\n            + (mat0.get(0, 1) * mat1.get(1, 2))\n            + (mat0.get(0, 2) * mat1.get(2, 2))\n            + (mat0.get(0, 3) * mat1.get(3, 2));\n        let r12 = (mat0.get(1, 0) * mat1.get(0, 2))\n            + (mat0.get(1, 1) * mat1.get(1, 2))\n            + (mat0.get(1, 2) * mat1.get(2, 2))\n            + (mat0.get(1, 3) * mat1.get(3, 2));\n        let r22 = (mat0.get(2, 0) * mat1.get(0, 2))\n            + (mat0.get(2, 1) * mat1.get(1, 2))\n            + (mat0.get(2, 2) * mat1.get(2, 2))\n            + (mat0.get(2, 3) * mat1.get(3, 2));\n        let r32 = (mat0.get(3, 0) * mat1.get(0, 2))\n            + (mat0.get(3, 1) * mat1.get(1, 2))\n            + (mat0.get(3, 2) * mat1.get(2, 2))\n            + (mat0.get(3, 3) * mat1.get(3, 2));\n        let r03 = (mat0.get(0, 0) * mat1.get(0, 3))\n            + (mat0.get(0, 1) * mat1.get(1, 3))\n            + (mat0.get(0, 2) * mat1.get(2, 3))\n            + (mat0.get(0, 3) * mat1.get(3, 3));\n        let r13 = (mat0.get(1, 0) * mat1.get(0, 3))\n            + (mat0.get(1, 1) * mat1.get(1, 3))\n            + (mat0.get(1, 2) * mat1.get(2, 3))\n            + (mat0.get(1, 3) * mat1.get(3, 3));\n        let r23 = (mat0.get(2, 0) * mat1.get(0, 3))\n            + (mat0.get(2, 1) * mat1.get(1, 3))\n            + (mat0.get(2, 2) * mat1.get(2, 3))\n            + (mat0.get(2, 3) * mat1.get(3, 3));\n        let r33 = (mat0.get(3, 0) * mat1.get(0, 3))\n            + (mat0.get(3, 1) * mat1.get(1, 3))\n            + (mat0.get(3, 2) * mat1.get(2, 3))\n            + (mat0.get(3, 3) * mat1.get(3, 3));\n\n        // NOW PUT ALL THE CALCULATED VALUES IN THE result MATRIX\n        result.set(r00, 0, 0);\n        result.set(r10, 1, 0);\n        result.set(r20, 2, 0);\n        result.set(r30, 3, 0);\n        result.set(r01, 0, 1);\n        result.set(r11, 1, 1);\n        result.set(r21, 2, 1);\n        result.set(r31, 3, 1);\n        result.set(r02, 0, 2);\n        result.set(r12, 1, 2);\n        result.set(r22, 2, 2);\n        result.set(r32, 3, 2);\n        result.set(r03, 0, 3);\n        result.set(r13, 1, 3);\n        result.set(r23, 2, 3);\n        result.set(r33, 3, 3);\n    }\n\n    export function projection(result : Matrix, nearZ : number, farZ : number, viewportWidth : number, viewportHeight : number, fovY : number) : void {\n        let aspectRatio = viewportWidth / viewportHeight;\n        let fieldOfViewY = this.math.degreesToRadians(fovY);\n        let fieldOfViewX = 2 * Math.atan(Math.tan(fieldOfViewY / 2) * aspectRatio);\n\n        // WE'LL USE THESE AS SHORTHAND FOR LOADING OUR MATRIX\n        let n = nearZ;\n        let f = farZ;\n        let r = Math.tan(fieldOfViewX / 2) * n;\n        let t = Math.tan(fieldOfViewY / 2) * n;\n\n        // 0-3\n        result.set(n / r, 0, 0);\n        result.set(0.0, 0, 1);\n        result.set(0.0, 0, 2);\n        result.set(0.0, 0, 3);\n        // 4-7\n        result.set(0.0, 1, 0);\n        result.set(n / t, 1, 1);\n        result.set(0.0, 1, 2);\n        result.set(0.0, 1, 3);\n        // 8-11\n        result.set(0.0, 2, 0);\n        result.set(0.0, 2, 1);\n        result.set((-(f + n)) / (f - n), 2, 2);\n        result.set((-2 * f * n) / (f - n), 2, 3);\n        // 12-15 \n        result.set(0.0, 3, 0);\n        result.set(0.0, 3, 1);\n        result.set(-1.0, 3, 2);\n        result.set(0.0, 3, 3);\n    }\n\n    export function rotate(result : Matrix, rotationVector : Vector3) : void {\n        // START WITH THE X-AXIS ROTATION\n        let xRotationMatrix = new Matrix(4, 4);\n        this.identity(xRotationMatrix);\n        let thetaX = rotationVector.getThetaX();\n        xRotationMatrix.set(Math.cos(thetaX), 1, 1);\n        xRotationMatrix.set(Math.sin(thetaX), 2, 1);\n        xRotationMatrix.set(-1 * Math.sin(thetaX), 1, 2);\n        xRotationMatrix.set(Math.cos(thetaX), 2, 2);\n\n        // START WITH THE Y-AXIS ROTATION\n        let yRotationMatrix = new Matrix(4, 4);\n        this.identity(yRotationMatrix);\n        let thetaY = rotationVector.getThetaY();\n        yRotationMatrix.set(Math.cos(thetaY), 0, 0);\n        yRotationMatrix.set(-1 * Math.sin(thetaY), 2, 0);\n        yRotationMatrix.set(Math.sin(thetaY), 0, 2);\n        yRotationMatrix.set(Math.cos(thetaY), 2, 2);\n\n        // START WITH THE Z-AXIS ROTATION\n        let zRotationMatrix = new Matrix(4, 4);\n        this.identity(zRotationMatrix);\n        let thetaZ = rotationVector.getThetaZ();\n        zRotationMatrix.set(Math.cos(thetaZ), 0, 0);\n        zRotationMatrix.set(Math.sin(thetaZ), 1, 0);\n        zRotationMatrix.set(-1 * Math.sin(thetaZ), 0, 1);\n        zRotationMatrix.set(Math.cos(thetaZ), 1, 1);\n\n        // START WITH THE X-AXIS ROTATION\n        let tempMatrix = new Matrix(4, 4);\n        this.identity(tempMatrix);\n        this.multiply(tempMatrix, xRotationMatrix, yRotationMatrix);\n        this.multiply(result, tempMatrix, zRotationMatrix);\n    }\n\n    export function scale(result : Matrix, scaleVector : Vector3) : void {\n        // START WITH THE IDENTITY MATRIX\n        this.identity(result, scaleVector);\n\n        // AND THEN LOAD IN THE TRANSLATION VALUES\n        result.set(scaleVector.getX(), 0, 0);\n        result.set(scaleVector.getY(), 1, 1);\n        result.set(scaleVector.getZ(), 2, 2);\n    }\n\n    export function transform(result : Vector3, mat : Matrix, vec : Vector3) : void {\n        result.setX((mat.get(0, 0) * vec.getX()) + (mat.get(0, 1) * vec.getY()) + (mat.get(0, 2) * vec.getZ()) + (mat.get(0, 3) * vec.getW()));\n        result.setY((mat.get(1, 0) * vec.getX()) + (mat.get(1, 1) * vec.getY()) + (mat.get(1, 2) * vec.getZ()) + (mat.get(1, 3) * vec.getW()));\n        result.setZ((mat.get(2, 0) * vec.getX()) + (mat.get(2, 1) * vec.getY()) + (mat.get(2, 2) * vec.getZ()) + (mat.get(2, 3) * vec.getW()));\n        result.setW((mat.get(3, 0) * vec.getX()) + (mat.get(3, 1) * vec.getY()) + (mat.get(3, 2) * vec.getZ()) + (mat.get(3, 3) * vec.getW()));\n    }\n\n    export function translate(result : Matrix, translationVector : Vector3) : void {\n        // START WITH THE IDENTITY MATRIX\n        this.identity(result);\n\n        // AND THEN LOAD IN THE TRANSLATION VALUES\n        result.set(translationVector.getX(), 0, 3);\n        result.set(translationVector.getY(), 1, 3);\n        result.set(translationVector.getZ(), 2, 3);\n    }\n\n    export function transpose(result : Matrix, mat : Matrix) : void {\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                let temp = mat.get(i, j);\n                result.set(temp, j, i);\n            }\n        }\n    }\n\n    export function view(result : Matrix, cameraPosition : Vector3, cameraOrientation : Vector3) : void {\n        let pitch = this.math.degreesToRadians(cameraOrientation.getThetaX());\n        let yaw = this.math.degreesToRadians(cameraOrientation.getThetaY());\n        let roll = this.math.degreesToRadians(cameraOrientation.getThetaZ());\n\n        // TO TRANSLATE\n        let translateVector = this.math.vectorMath.createPositionVector();\n        translateVector.set(-cameraPosition.getX(), -cameraPosition.getY(), -cameraPosition.getZ());\n        let translateMatrix = new Matrix(4, 4);\n        this.identity(translateMatrix);\n        this.translate(translateMatrix, translateVector);\n\n        // TO ROTATE\n        let rotateVector = this.math.vectorMath.createRotationVector();\n        rotateVector.set(-pitch, -yaw, -roll);\n        let rotateMatrix = new Matrix(4, 4);\n        this.rotate(rotateMatrix, rotateVector);\n\n        // NOW COMBINE THE 2 MATRICES\n        this.multiply(result, rotateMatrix, translateMatrix);\n    }\n\n    export function addVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        for (let i = 0; i < vec0.getSize(); i++) {\n            let total = vec0.getAt(i) + vec1.getAt(i);\n            result.setAt(i, total);\n        }\n    }\n\n    export function crossProduct(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        let result0 = (vec0.getY() * vec1.getZ())\n            - (vec1.getY() * vec0.getZ());\n        let result1 = (vec0.getZ() * vec1.getX())\n            - (vec1.getZ() * vec0.getX());\n        let result2 = (vec0.getX() * vec1.getY())\n            - (vec1.getX() * vec0.getY());\n        result.setX(result0);\n        result.setY(result1);\n        result.setZ(result2);\n    }\n\n    export function dotProduct(vec0 : Vector3, vec1 : Vector3) : number {\n        let resultX = vec0.getX() * vec1.getX();\n        let resultY = vec0.getY() * vec1.getY();\n        let resultZ = vec0.getZ() * vec1.getZ();\n        return resultX + resultY + resultZ;\n    }\n\n    export function multiplyVectors(result : Vector3, vec : Vector3, scalar : number) : void {\n        let vecX = vec.getX() * scalar;\n        let vecY = vec.getY() * scalar;\n        let vecZ = vec.getZ() * scalar;\n        result.setX(vecX);\n        result.setY(vecY);\n        result.setZ(vecZ);\n    }\n\n    export function normalize(result : Vector3, vec : Vector3) : void {\n        let xSquared = vec.getX() * vec.getX();\n        let ySquared = vec.getY() * vec.getY();\n        let zSquared = vec.getZ() * vec.getZ();\n        let distance = Math.sqrt(xSquared + ySquared + zSquared);\n        result.setX(vec.getX() / distance);\n        result.setY(vec.getY() / distance);\n        result.setZ(vec.getZ() / distance);\n    }\n\n    export function subtractVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\n        let resultX = vec0.getX() - vec1.getX();\n        let resultY = vec0.getY() - vec1.getY();\n        let resultZ = vec0.getZ() - vec1.getZ();\n        result.setX(resultX);\n        result.setY(resultY);\n        result.setZ(resultZ);\n    }\n}","/*\n * A Matrix is used for transforming points from local\n * coordinates to world coordinates.\n */\nexport class Matrix {\n    private mat : Float32Array;\n    private rows : number;\n    private columns : number;\n\n    public constructor(rows : number, columns : number) {\n        this.rows = rows;\n        this.columns = columns;\n        this.mat = new Float32Array(rows * columns);\n        for (let i = 0; i < (rows * columns); i++)\n            this.mat[i] = 0.0;\n    }\n\n    public getData() : Float32Array {\n        return this.mat;\n    }\n\n    public getRows() : number {\n        return this.rows;\n    }\n\n    public getColumns() : number {\n        return this.columns;\n    }\n\n    public getIndex (rows : number, columns : number) : number {\n        return (this.rows * columns) + rows;\n    }\n    \n    public get (row : number, column : number) : number {\n        let index = this.getIndex(row, column);\n        let valueToReturn = this.mat[index];\n        return valueToReturn;\n    }\n\n    public set (value : number, row : number, column : number) {\n        let index = this.getIndex(row, column);\n        this.mat[index] = value;\n    }\n    \n    public print () : void {\n        let maxWidth = 0;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                let testNum = this.get(j, i) + \"\";\n                if (testNum.length > maxWidth) {\n                    maxWidth = testNum.length;\n                }\n            }\n        }\n        let text = \"[ \";\n        for (let i = 0; i < this.rows; i++) {\n            if (i > 0)\n                text += \"  \";\n            for (var j = 0; j < this.columns; j++) {\n                var numText = this.get(i, j) + \"\";\n                while (numText.length < maxWidth) {\n                    numText = \" \" + numText;\n                }\n                text += numText;\n                if (j < (this.columns - 1)) {\n                    text += \",\";\n                }\n                text += \" \";\n            }\n            if (i < (this.rows - 1)) {\n                text += \"\\n\";\n            }\n            text += \"]\";\n            console.log(text);\n        }\n    }\n}","/**\n * Vector3\n * \n * The Vector3 class can be used for any 2d or 3d point, vector, \n * or rotation (i.e. angles of orientation).\n */\nexport class Vector3 {\n    private vec : Float32Array;\n    private size : number;\n\n    public constructor() {\n        this.vec = new Float32Array(4);\n        for (let i = 0; i < 4; i++)\n            this.vec[i] = 0.0;\n        this.size = 4;\n    }\n\n    public getSize() : number {\n        return this.size;\n    }\n\n    public getAt(index : number) : number {\n        return this.vec[index];\n    }\n\n    public getX() : number {\n        return this.vec[0];\n    }\n\n    public getY() : number {\n        return this.vec[1];\n    }\n\n    public getZ() : number {\n        return this.vec[2];\n    }\n\n    public getW() : number {\n        return this.vec[3];\n    }\n\n    public getThetaX() : number {\n        return this.vec[0];\n    }\n\n    public getThetaY() : number {\n        return this.vec[1];\n    }\n\n    public getThetaZ() : number {\n        return this.vec[2];\n    }\n\n    public set(init0 : number, init1 : number, init2 : number, init3 : number) : void {\n        this.vec[0] = init0;\n        this.vec[1] = init1;\n        this.vec[2] = init2;\n        this.vec[3] = init3;\n    }\n\n    public setAt(index : number, value : number) : void {\n        this.vec[index] = value;\n    }\n\n    public setX(initX : number) : void {\n        this.vec[0] = initX;\n    }\n\n    public setY(initY : number) : void {\n        this.vec[1] = initY;\n    }\n\n    public setZ(initZ : number) : void {\n        this.vec[2] = initZ;\n    }\n\n    public setW(initW : number) : void {\n        this.vec[3] = initW;\n    }\n\n    public setThetaX(initThetaX : number) : void {\n        this.setX(initThetaX);\n    }\n\n    public setThetaY(initThetaY : number) : void {\n        this.setY(initThetaY);\n    }\n\n    public setThetaZ(initThetaZ : number) : void {\n        this.setZ(initThetaZ);\n    }\n\n    public print() : void {\n        let text = \"[\";\n        for (let i = 0; i < this.size; i++) {\n            text += this.vec[i];\n            if (i < (this.size - 1)) {\n                text += \", \";\n            }\n        }\n        text += \"]\";\n        console.log(text);\n    }\n}","import { Vector3 } from \"./Vector3\";\nimport { AnimatedSprite } from \"../scene/sprite/AnimatedSprite\";\n\n/**\n * boudingCircle \n * \n * This class decorates the vector3 class using the fields to store x, y, and radius of a circle.\n * \n */\nexport class BoundingCircle {\n    private vec3: Vector3;\n\n    public constructor(sprite: AnimatedSprite) {\n        this.vec3 = new Vector3();\n\n        this.vec3.setX(sprite.getPosition().getX() + (sprite.getSpriteType().getSpriteWidth() / 2));\n        this.vec3.setY(sprite.getPosition().getY() - (sprite.getSpriteType().getSpriteHeight() / 2));\n\n        let spriteWidth: number = sprite.getSpriteType().getSpriteWidth();\n        let spriteHeight: number = sprite.getSpriteType().getSpriteHeight();\n\n        this.vec3.setZ(Math.sqrt((spriteWidth / 2 * spriteWidth / 2) + (spriteHeight / 2 * spriteHeight / 2)));\n    }\n\n    public getRadius(): number {\n        return this.vec3.getZ();\n    }\n\n    public getX(): number {\n        return this.vec3.getX();\n    }\n\n    public getY(): number {\n        return this.vec3.getY();\n    }\n\n    public setRadius(spriteWidth: number, spriteHeight: number): void {\n        this.vec3.setZ(Math.sqrt((spriteWidth / 2 * spriteWidth / 2) + (spriteHeight / 2 * spriteHeight / 2)));\n    }\n\n    public setX(x: number): void {\n        this.vec3.setX(x);\n    }\n\n    public setY(y: number): void {\n        this.vec3.setY(y);\n    }\n\n    public intersects(bv2: BoundingCircle): boolean {\n\n        let deltaX: number = this.getX() - bv2.getX();\n        let deltaY: number = this.getY() - bv2.getY();\n        let m: number = Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));\n\n        if (m < this.getRadius() + bv2.getRadius()) {\n            return true;\n        }\n        return false;\n    }\n\n    public print(): void {\n        let text = \"[X_POSITION: \" + this.vec3.getX() + \", Y_POSITION: \" + this.vec3.getY() + \", RADIUS: \" + this.vec3.getZ() + \"]\";\n        console.log(text);\n    }\n}","import { SceneGraph } from '../scene/SceneGraph'\nimport { AnimatedSprite } from '../scene/sprite/AnimatedSprite'\nimport { SceneObject } from '../scene/SceneObject';\nimport { Vector3 } from '../math/Vector3';\nimport { BoundingCircle } from '../math/boundingCircle';\nimport { State } from '../AI/AIBehavior';\n\nexport class GamePhysics {\n    constructor() {\n\n    }\n\n    update(sceneGraph: SceneGraph): void {\n        // UPDATE ALL OBJECT POSITIONS ACCORDING TO THEIR VELOCITIES\n        // BUT MAKE SURE TO PERFORM COLLISION DETECTION AS WELL\n        // NOTE, FOR THIS YOU SHOULD MAKE SURE EACH SCENE OBJECT\n        // HAS A BOUNDING VOLUME LIKE EITHER AN AABB OR A CIRCLE\n\n        let nonPlayerSprites: AnimatedSprite[] = sceneGraph.spritesInRange(\n            sceneGraph.getPlayer().getPosition().getX(),\n            sceneGraph.getPlayer().getPosition().getY(),\n            sceneGraph.getPlayer().getSpriteType().getSpriteWidth());\n        nonPlayerSprites.splice(nonPlayerSprites.indexOf(sceneGraph.getPlayer()), 1);\n\n        let playerBoundingVolume: BoundingCircle = new BoundingCircle(sceneGraph.getPlayer());\n        let spriteBoundingCircle: BoundingCircle = new BoundingCircle(sceneGraph.getPlayer());\n\n        nonPlayerSprites.forEach(sprite => {\n            spriteBoundingCircle.setX(sprite.getPosition().getX());\n            spriteBoundingCircle.setY(sprite.getPosition().getY());\n            spriteBoundingCircle.setRadius(sprite.getSpriteType().getSpriteWidth() / 2, sprite.getSpriteType().getSpriteHeight() / 2);\n\n            if (spriteBoundingCircle.intersects(playerBoundingVolume)) {\n                if (sprite.getSpriteType().getSpriteSheetTexture().webGLTextureId == 4) {\n                    sprite.setState(\"DYING\");\n                    if (sprite ? sprite.hasAI : false) {\n                        sprite.getAI().setBehavior([State.NONE]);\n                    }\n                }\n            }\n        });\n\n\n    }\n}","/*\n * This class renders text to a canvas, updated each frame.\n */\nexport class TextToRender {\n    public id : string;\n    public text : string;\n    public x : number;\n    public y : number;\n    public update : Function;\n    public fontFamily : string;\n    public fontSize : number;\n    public fontColor : string;\n    public properties : Map<string, object>;\n\n    public constructor(initId : string, initText : string, initX : number, initY : number, initUpdate : Function) {\n        this.id = initId;\n        this.text = initText;\n        this.x = initX;\n        this.y = initY;\n        this.update = initUpdate;\n        this.fontFamily = \"\";\n        this.fontSize = 0;\n        this.fontColor = \"\";\n        this.properties = new Map();\n    }\n}\n\nexport class TextRenderer {\n    private textToRender : Array<TextToRender>;\n    private textCanvas : HTMLCanvasElement;\n    private textCanvasWidth : number;\n    private textCanvasHeight : number;\n    private textCtx : CanvasRenderingContext2D;\n    private defaultFontFamily : string;\n    private defaultFontSize : number;\n    private defaultFontColor : string;\n\n    public constructor(textCanvasId : string, initFontFamily : string, initFontSize : number, initFontColor : string) {\n        this.textToRender = new Array();\n        this.textCanvas = <HTMLCanvasElement>document.getElementById(textCanvasId);\n        this.textCanvas.width = window.innerWidth;\n        this.textCanvas.height = window.innerHeight;\n        this.textCanvasWidth = this.textCanvas.width;\n        this.textCanvasHeight = this.textCanvas.height;\n        this.textCtx = this.textCanvas.getContext(\"2d\");\n        this.defaultFontFamily = initFontFamily;\n        this.defaultFontSize = initFontSize;\n        this.defaultFontColor = initFontColor;\n    }\n    \n    public addTextToRender(textToAdd : TextToRender) : void {\n        textToAdd.fontFamily = this.defaultFontFamily;\n        textToAdd.fontSize = this.defaultFontSize;\n        textToAdd.fontColor = this.defaultFontColor;\n        this.textToRender.push(textToAdd);\n    }\n\n    public clear() : void {\n        this.textToRender = [];\n    }\n\n    public getCanvasWidth() : number {\n        return this.textCanvasWidth;\n    }\n\n    public getCanvasHeight() : number {\n        return this.textCanvasHeight;\n    }\n\n    public render() : void {\n        this.textCtx.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\n        for (var i = 0; i < this.textToRender.length; i++) {\n            var textToRender = this.textToRender[i];\n            textToRender.update();\n            this.textCtx.font = \"\" + textToRender.fontSize + \"px \" + textToRender.fontFamily;\n            this.textCtx.fillStyle = textToRender.fontColor;\n            this.textCtx.fillText(textToRender.text, textToRender.x, textToRender.y);\n        }\n    }\n}","import { WebGLGameShader } from './WebGLGameShader'\nimport { Matrix } from '../math/Matrix'\nimport { Vector3 } from '../math/Vector3'\n\nexport abstract class WebGLGameRenderingComponent {\n    protected readonly A_POSITION = \"a_Position\";\n    protected readonly A_TEX_COORD = \"a_TexCoord\";\n    protected readonly U_MESH_TRANSFORM = \"u_MeshTransform\";\n    protected readonly U_TEX_COORD_FACTOR = \"u_TexCoordFactor\";\n    protected readonly U_TEX_COORD_SHIFT = \"u_TexCoordShift\";\n    protected readonly U_SAMPLER = \"u_Sampler\";\n    protected readonly NUM_VERTICES = 4;\n    protected readonly FLOATS_PER_VERTEX = 2;\n    protected readonly FLOATS_PER_TEXTURE_COORDINATE = 2;\n    protected readonly TOTAL_BYTES = 16;\n    protected readonly VERTEX_POSITION_OFFSET = 0;\n    protected readonly TEXTURE_COORDINATE_OFFSET = 8;\n    protected readonly INDEX_OF_FIRST_VERTEX = 0;\n\n    // THESE WILL BE PROVIDED CUSTOMLY AFTER CONSTRUCTION DURING init\n    protected shader: WebGLGameShader;\n    protected vertexDataBuffer: WebGLBuffer;\n    protected webGLAttributeLocations: Map<string, GLuint>;\n    protected webGLUniformLocations: Map<string, WebGLUniformLocation>;\n\n    // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\n    protected meshTransform: Matrix;\n    protected meshTranslate: Vector3;\n    protected meshRotate: Vector3;\n    protected meshScale: Vector3;\n\n    constructor() {\n        // WE'LL MANAGE THESE FOR OUR WebGL SHADERS\n        this.webGLAttributeLocations = new Map();\n        this.webGLUniformLocations = new Map();\n\n        // WE'LL USE THESE FOR TRANSLATING, ROTATING, AND SCALING THE MESH\n        this.meshTransform = new Matrix(4, 4);\n        this.meshTranslate = new Vector3();\n        this.meshRotate = new Vector3();\n        this.meshScale = new Vector3();\n    }\n\n    public init(webGL: WebGLRenderingContext,\n        vertexShaderSource: string,\n        fragmentShaderSource: string,\n        renderSetupData: object): void {\n        // FIRST WE NEED TO MAKE THE SHADER\n        this.shader = new WebGLGameShader();\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\n\n        // CREATE THE BUFFER ON THE GPU\n        this.vertexDataBuffer = webGL.createBuffer();\n\n        // BIND THE BUFFER TO BE VERTEX DATA\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexDataBuffer);\n\n        // MAKE THE MESH DATA OURSELVES IN A CHILD CLASS\n        let meshVertexData: Float32Array = this.getVertexData(renderSetupData);\n\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\n        webGL.bufferData(webGL.ARRAY_BUFFER, meshVertexData, webGL.STATIC_DRAW);\n\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\n        this.loadAttributeLocations(webGL, this.getShaderAttributeNames());\n        this.loadUniformLocations(webGL, this.getShaderUniformNames());\n    }\n\n    public abstract getVertexData(renderData: object): Float32Array;\n    public abstract getShaderAttributeNames(): string[];\n    public abstract getShaderUniformNames(): string[];\n\n    /**\n     * This function loads all the attribute data values so that we can\n     * retrieve them later when it is time to render. Note that this function\n     * can only be called after the shader program has been created.\n     */\n    protected loadAttributeLocations(webGL: WebGLRenderingContext, attributeLocationNames: Array<string>) {\n        for (var i = 0; i < attributeLocationNames.length; i++) {\n            let locationName: string = attributeLocationNames[i];\n            let location: GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\n            this.webGLAttributeLocations.set(locationName, location);\n        }\n    }\n\n    /**\n     * This function loads all the uniform data values so that we can\n     * retrieve them later when it is time to render. Note that this function\n     * can only be called after the shader program has been created.\n     */\n    protected loadUniformLocations(webGL: WebGLRenderingContext, uniformLocationNames: Array<string>) {\n        for (let i: number = 0; i < uniformLocationNames.length; i++) {\n            let locationName: string = uniformLocationNames[i];\n            let location: WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\n            this.webGLUniformLocations.set(locationName, location);\n        }\n    }\n}","/*\n * This serves as the subsystem that manages all game rendering.\n */\nimport { TextRenderer } from './TextRenderer'\nimport { WebGLGameTiledLayerRenderer } from './WebGLGameTiledLayerRenderer'\nimport { WebGLGameSpriteRenderer } from './WebGLGameSpriteRenderer'\nimport { WebGLGameTexture } from './WebGLGameTexture';\nimport { AnimatedSprite } from '../scene/sprite/AnimatedSprite'\nimport { TiledLayer } from '../scene/tiles/TiledLayer'\nimport { Viewport } from '../scene/Viewport'\n\n\nexport class WebGLGameRenderingSystem {\n    private renderingCanvas: HTMLCanvasElement;\n    private webGL: WebGLRenderingContext;\n    private canvasWidth: number;\n    private canvasHeight: number;\n\n    // OUR GAMES RENDER THREE DIFFERENT TYPES OF THINGS\n    private tiledLayerRenderer: WebGLGameTiledLayerRenderer;\n    private spriteRenderer: WebGLGameSpriteRenderer;\n    private textRenderer: TextRenderer;\n\n    public constructor( renderingCanvasId: string,\n                        textCanvasId: string) {\n        // FIRST SETUP webGL\n        this.renderingCanvas = <HTMLCanvasElement>document.getElementById(renderingCanvasId);\n        this.renderingCanvas.width = window.innerWidth;\n        this.renderingCanvas.height = window.innerHeight;\n        this.canvasWidth = this.renderingCanvas.width;\n        this.canvasHeight = this.renderingCanvas.height;\n        this.webGL = this.renderingCanvas.getContext(\"webgl\");\n\n        // IF THE USER'S MACHINE/BROWSER DOESN'T SUPPORT\n        // WebGL THEN THERE'S NO POINT OF GOING ON\n        if (!this.webGL) {\n            // PROVIDE SOME FEEDBACK THAT WebGL WON'T WORK BECAUSE\n            // THE USER'S' GRAPHICS CARD IS FOR THE BIRDS\n            console.error(\"WebGL is not supported by this device\");\n\n            // AND END INITIALIZATION\n            return;\n        }\n\n        // WebGL IS SUPPORTED, SO INIT EVERYTHING THAT USES IT\n\n        // MAKE THE CLEAR COLOR BLACK\n        this.setClearColor(0.0, 0.0, 0.0, 1.0);\n\n        // ENABLE DEPTH TESTING\n        this.webGL.disable(this.webGL.DEPTH_TEST);\n        this.webGL.enable(this.webGL.BLEND);\n        this.webGL.blendFunc(this.webGL.SRC_ALPHA, this.webGL.ONE_MINUS_SRC_ALPHA);\n\n        // TURN ON BACKFACE CULLING\n        this.webGL.enable(this.webGL.CULL_FACE);\n\n        // THIS SPECIFIES THAT WE'RE USING THE ENTIRE CANVAS\n        this.webGL.viewport(0, 0, this.canvasWidth, this.canvasHeight);\n\n        // MAKE THE TILED LAYER RENDERER\n        this.tiledLayerRenderer = new WebGLGameTiledLayerRenderer();\n\n        // MAKE THE SPRITE RENDERER\n        this.spriteRenderer = new WebGLGameSpriteRenderer();\n\n        // THIS WILL STORE OUR TEXT\n        this.textRenderer = new TextRenderer(textCanvasId, \"serif\", 18, \"#FFFF00\");\n    }\n\n    public getTextureConstant(id: number): number {\n        // WE ONLY ALLOW FOR 10 TEXTURES TO BE PUT ON THE GPU\n        switch (id) {\n            case 0: return this.webGL.TEXTURE0;\n            case 1: return this.webGL.TEXTURE1;\n            case 2: return this.webGL.TEXTURE2;\n            case 3: return this.webGL.TEXTURE3;\n            case 4: return this.webGL.TEXTURE4;\n            case 5: return this.webGL.TEXTURE5;\n            case 6: return this.webGL.TEXTURE6;\n            case 7: return this.webGL.TEXTURE7;\n            case 8: return this.webGL.TEXTURE8;\n            default: return this.webGL.TEXTURE9;\n        }\n    }\n\n    public getWebGL(): WebGLRenderingContext {\n        return this.webGL;\n    }\n\n    public getTiledLayerRenderer(): WebGLGameTiledLayerRenderer {\n        return this.tiledLayerRenderer;\n    }\n\n    public getSpriteRenderer(): WebGLGameSpriteRenderer {\n        return this.spriteRenderer;\n    }\n\n    public getTextRenderer(): TextRenderer {\n        return this.textRenderer;\n    }\n\n    public initWebGLTexture(textureToInit: WebGLGameTexture, textureId: number, image: HTMLImageElement, callback: Function): void {\n        textureToInit.width = image.width;\n        textureToInit.height = image.height;\n\n        // CREATE A WebGL TEXTURE ON THE GPU\n        textureToInit.webGLTexture = this.webGL.createTexture();\n        textureToInit.webGLTextureId = textureId;\n\n        // FLIP THE IMAGE'S y-AXIS\n        //webGL.pixelStorei(webGL.UNPACK_FLIP_Y_WEBGL, 1);\n\n        // ACTIVATE THE WebGL TEXTURE ON THE GPU\n        //let textureNumName : string = \"TEXTURE\" + textureId;\n        let textureNameConstant: number = this.getTextureConstant(textureId);\n        this.webGL.activeTexture(textureNameConstant);\n\n        // BIND THE TEXTURE TO A 2D TYPE\n        this.webGL.bindTexture(this.webGL.TEXTURE_2D, textureToInit.webGLTexture);\n\n        // SPECIFY RENDERING SETTINGS\n        this.webGL.texParameteri(this.webGL.TEXTURE_2D, this.webGL.TEXTURE_MIN_FILTER, this.webGL.LINEAR);\n\n        // SET THE IMAGE FOR THE TEXTURE\n        this.webGL.texImage2D(this.webGL.TEXTURE_2D, 0, this.webGL.RGBA, this.webGL.RGBA, this.webGL.UNSIGNED_BYTE, image);\n\n        // KEEP IT FOR WHEN WE RENDER\n        callback();\n    }\n\n    public setClearColor(r: number, g: number, b: number, a: number): void {\n        this.webGL.clearColor(r, g, b, a);\n    }\n\n    public render(  viewport : Viewport,\n                    tiledLayers: Array<TiledLayer>,\n                    visibleSprites: Array<AnimatedSprite>): void {\n        // CLEAR THE CANVAS\n        this.webGL.clear(this.webGL.COLOR_BUFFER_BIT | this.webGL.DEPTH_BUFFER_BIT);\n\n        // RENDER THE TILED LAYER FIRST\n        this.tiledLayerRenderer.render(this.webGL, viewport, tiledLayers);\n\n        // RENDER THE SPRITES ON ONE CANVAS\n        this.spriteRenderer.render(this.webGL, viewport, visibleSprites);\n\n        // THEN THE TEXT ON ANOTHER OVERLAPPING CANVAS\n        this.textRenderer.render();\n    }\n}","/*\n * This is a wrapper class for a WebGLProgram, i.e. a shader for custom rendering\n * using WebGL's programmable pipeline.\n */\nexport class WebGLGameShader {\n    private program : WebGLProgram;\n    private vertexShader : WebGLShader;\n    private fragmentShader : WebGLShader;\n\n    public constructor() {}\n\n    public getProgram() : WebGLProgram {\n        return this.program;\n    }\n\n    public init(webGL : WebGLRenderingContext, vSource : string, fSource : string) : void {\n        this.vertexShader = <WebGLShader>this.createShader(webGL, webGL.VERTEX_SHADER, vSource);\n        this.fragmentShader = <WebGLShader>this.createShader(webGL, webGL.FRAGMENT_SHADER, fSource);\n        this.program = this.createShaderProgram(webGL, this.vertexShader, this.fragmentShader);\n    }\n\n    public createShader(webGL : WebGLRenderingContext, type : number, source : string) : WebGLShader {\n        // MAKE A NEW SHADER OBJECT, LOAD IT'S SOURCE, AND COMPILE IT\n        var shader = webGL.createShader(type);\n        webGL.shaderSource(shader, source);\n        webGL.compileShader(shader);\n\n        // DID IT COMPILE?\n        var success = webGL.getShaderParameter(shader, webGL.COMPILE_STATUS);\n        if (success) {\n            return shader;\n        }\n\n        // DISASTER\n        console.log(webGL.getShaderInfoLog(shader));\n        webGL.deleteShader(shader);\n        return null;\n    }\n\n    public createShaderProgram(webGL : WebGLRenderingContext, vShader : WebGLShader, fShader : WebGLShader) : WebGLProgram {\n        // MAKE THE GLSL SHADER PROGRAM\n        let programToCreate = webGL.createProgram();\n\n        // LINK THE VERT AND FRAG\n        webGL.attachShader(programToCreate, vShader);\n        webGL.attachShader(programToCreate, fShader);\n\n        // NOW WE CAN LINK THE SHADER PROGRAM\n        webGL.linkProgram(programToCreate);\n        let linked : boolean = webGL.getProgramParameter(programToCreate, webGL.LINK_STATUS);\n\n        // IS IT LINKED?\n        if (!linked) {\n            // DISASTER\n            let errorFeedback : string = webGL.getProgramInfoLog(programToCreate);\n            console.log(errorFeedback);\n\n            // DISASTER\n            console.log(webGL.getProgramInfoLog(programToCreate));\n            webGL.deleteProgram(programToCreate);\n        }\n        return programToCreate;\n    }\n}","import { WebGLGameRenderingComponent } from './WebGLGameRenderingComponent'\nimport { MathUtilities } from '../math/MathUtilities'\nimport { AnimatedSprite } from '../scene/sprite/AnimatedSprite'\nimport { AnimatedSpriteType } from '../scene/sprite/AnimatedSpriteType'\nimport { WebGLGameTexture } from './WebGLGameTexture'\nimport { Viewport } from '../scene/Viewport'\nimport { Vector3 } from '../math/Vector3'\n\nexport class WebGLGameSpriteRenderer extends WebGLGameRenderingComponent {\n\n    public constructor() {\n        super();\n    }\n\n    public getVertexData(): Float32Array {\n        return new Float32Array([\n            -0.5, 0.5, 0.0, 0.0,\n            -0.5, -0.5, 0.0, 1.0,\n            0.5, 0.5, 1.0, 0.0,\n            0.5, -0.5, 1.0, 1.0\n        ]);\n    }\n    public getShaderAttributeNames(): string[] {\n        return [this.A_POSITION, this.A_TEX_COORD];\n    }\n    public getShaderUniformNames(): string[] {\n        return [this.U_MESH_TRANSFORM, this.U_SAMPLER, this.U_TEX_COORD_FACTOR, this.U_TEX_COORD_SHIFT];\n    }\n\n    public render(webGL: WebGLRenderingContext,\n        viewport: Viewport,\n        visibleSprites: Array<AnimatedSprite>): void {\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\n        let shaderProgramToUse = this.shader.getProgram();\n        webGL.useProgram(shaderProgramToUse);\n\n        // AND THEN RENDER EACH ONE\n        for (let sprite of visibleSprites) {\n            this.renderAnimatedSprite(webGL, viewport, sprite);\n        }\n    }\n\n    private renderAnimatedSprite(webGL: WebGLRenderingContext,\n        viewport: Viewport,\n        sprite: AnimatedSprite): void {\n        // YOU'LL NEED TO UPDATE THIS METHOD TO MAKE SURE SPRITES SCROLL AND ROTATE\n\n        let canvasWidth: number = webGL.canvas.width;\n        let canvasHeight: number = webGL.canvas.height;\n        let spriteType: AnimatedSpriteType = sprite.getSpriteType();\n        let texture: WebGLGameTexture = spriteType.getSpriteSheetTexture();\n\n        // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE SPRITE POSITION\n        let spriteWidth: number = spriteType.getSpriteWidth();\n        let spriteHeight: number = spriteType.getSpriteHeight();\n        let spriteXInPixels: number = sprite.getPosition().getX() + (spriteWidth / 2) - (viewport.getX());\n        let spriteYInPixels: number = sprite.getPosition().getY() + (spriteHeight / 2) + (viewport.getY());\n        // if(sprite.getIgnoreViewport() == false){\n        //     spriteXInPixels -= viewport.getX();\n        //     spriteYInPixels += viewport.getY();\n        // }\n        let spriteXTranslate: number = (spriteXInPixels - (canvasWidth / 2)) / (canvasWidth / 2);\n        let spriteYTranslate: number = (spriteYInPixels - (canvasHeight / 2)) / (canvasHeight / 2);\n        this.meshTranslate.setX(spriteXTranslate);\n        this.meshTranslate.setY(-spriteYTranslate);\n\n\n\n        var tempRotation: number = sprite.getDirection();\n        var rotationDegrees: number = tempRotation * (Math.PI / 180);\n        var rotationSin: number = Math.sin(rotationDegrees);\n        var rotationCos: number = Math.cos(rotationDegrees);\n\n\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE SPRITE SIZE\n        let defaultWidth: number = canvasWidth;\n        let defaultHeight: number = canvasHeight;\n        let scaleX: number = 2 * spriteWidth / defaultWidth;\n        let scaleY: number = 2 * spriteHeight / defaultHeight;\n        let flipAngleWidth = Math.atan(defaultWidth / defaultHeight) * (180 / Math.PI);\n        let filpAngleHeight = Math.atan(defaultHeight / defaultWidth) * (180 / Math.PI);\n        // console.log(flipAngle);\n        // console.log(filpAngle2);\n        // console.log(defaultHeight);\n        // console.log(defaultWidth);\n        // let scaleX: number;\n        // let scaleY: number;\n\n\n\n        // let otherRotation: number = tempRotation;\n        // // if (tempRotation > 180) {\n        // //     otherRotation -= 180;\n        // // }\n\n        // <testing>\n        // rotationDegrees %= 90;\n\n        // if (rotationDegrees <= flipAngleWidth) {\n        //     scaleX = 2 * spriteWidth / (2 * ((defaultWidth / 2) / Math.cos(rotationDegrees)));\n        // } else {\n        //     scaleX = 2 * spriteWidth / (2 * ((defaultHeight / 2) / Math.cos(90 - rotationDegrees)));\n        // }\n\n        // if (rotationDegrees <= filpAngleHeight) {\n        //     scaleY = 2 * spriteHeight / (2 * ((defaultHeight / 2) / Math.cos(rotationDegrees)));\n        // } else {\n        //     scaleY = 2 * spriteWidth / (2 * ((defaultWidth / 2) / Math.cos(90 - rotationDegrees)))\n        // }\n\n        // this.meshScale.set(scaleX, scaleY, 0.0, 0.0);\n        // </Testing>\n\n        // if (otherRotation >= 0 && otherRotation <= flipAngle) {\n        //     scaleX = 2 * spriteWidth / (2 * ((defaultWidth / 2) / Math.cos(rotationDegrees)));\n        //     scaleY = 2 * spriteHeight / (2 * ((defaultHeight / 2) / Math.cos(rotationDegrees)));\n        // } else if (otherRotation > flipAngle && otherRotation < 90) {\n        //     scaleY = 2 * spriteWidth / (2 * ((defaultHeight / 2) / Math.cos((Math.PI / 2) - rotationDegrees)));\n        //     scaleX = 2 * spriteHeight / (2 * ((defaultHeight / 2) / Math.cos(rotationDegrees)));\n        // } else if (otherRotation >= 90 && otherRotation <= filpAngle2 + 90) {\n        //     scaleY = 2 * spriteWidth / (2 * ((defaultHeight / 2) / Math.cos((Math.PI) - rotationDegrees)));\n        //     scaleX = 2 * spriteHeight / (2 * ((defaultHeight / 2) / Math.cos((Math.PI / 2) - (Math.PI) - rotationDegrees)));\n        // } else {\n        //     scaleX = 2 * spriteWidth / (2 * ((defaultWidth / 2) / Math.cos((Math.PI) - rotationDegrees)));\n        //     scaleY = 2 * spriteHeight / (2 * ((defaultHeight / 2) / Math.cos((Math.PI) - rotationDegrees)));\n        // }\n\n\n        this.meshScale.set(Math.abs(rotationCos * scaleX) + Math.abs(rotationSin * scaleY), Math.abs(rotationCos * scaleY) + Math.abs(rotationSin * scaleX), 0.0, 0.0);\n\n        this.meshRotate.set(0.0, 0.0, tempRotation * 0.0174533, 0.0); // rotate on z axis\n\n\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\n        MathUtilities.identity(this.meshTransform);\n        MathUtilities.model(this.meshTransform, this.meshTranslate, this.meshRotate, this.meshScale);\n\n        // FIGURE OUT THE TEXTURE COORDINATE FACTOR AND SHIFT\n        let texCoordFactorX: number = spriteWidth / texture.width;\n        let texCoordFactorY: number = spriteHeight / texture.height;\n        let spriteLeft: number = sprite.getLeft();\n        let spriteTop: number = sprite.getTop();\n        let texCoordShiftX: number = spriteLeft / texture.width;\n        let texCoordShiftY: number = spriteTop / texture.height;\n\n        // USE THE ATTRIBUTES\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexDataBuffer);\n        webGL.bindTexture(webGL.TEXTURE_2D, texture.webGLTexture);\n\n        // HOOK UP THE ATTRIBUTES\n        let a_PositionLocation: GLuint = this.webGLAttributeLocations.get(this.A_POSITION);\n        webGL.vertexAttribPointer(a_PositionLocation, this.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, this.TOTAL_BYTES, this.VERTEX_POSITION_OFFSET);\n        webGL.enableVertexAttribArray(a_PositionLocation);\n        let a_TexCoordLocation: GLuint = this.webGLAttributeLocations.get(this.A_TEX_COORD);\n        webGL.vertexAttribPointer(a_TexCoordLocation, this.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, this.TOTAL_BYTES, this.TEXTURE_COORDINATE_OFFSET);\n        webGL.enableVertexAttribArray(a_TexCoordLocation);\n\n        // USE THE UNIFORMS\n        let u_MeshTransformLocation: WebGLUniformLocation = this.webGLUniformLocations.get(this.U_MESH_TRANSFORM);\n        webGL.uniformMatrix4fv(u_MeshTransformLocation, false, this.meshTransform.getData());\n\n        let u_SamplerLocation: WebGLUniformLocation = this.webGLUniformLocations.get(this.U_SAMPLER);\n        webGL.uniform1i(u_SamplerLocation, texture.webGLTextureId);\n\n        let u_TexCoordFactorLocation: WebGLUniformLocation = this.webGLUniformLocations.get(this.U_TEX_COORD_FACTOR);\n        webGL.uniform2f(u_TexCoordFactorLocation, texCoordFactorX, texCoordFactorY);\n\n        let u_TexCoordShiftLocation: WebGLUniformLocation = this.webGLUniformLocations.get(this.U_TEX_COORD_SHIFT);\n        webGL.uniform2f(u_TexCoordShiftLocation, texCoordShiftX, texCoordShiftY);\n\n        // Rotation\n        // let u_RotationLocation: WebGLUniformLocation = this.webGLAttributeLocations.get(this.U_ROTATION);\n        // webGL.uniform2fv(u_RotationLocation, rotation);\n\n\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, this.INDEX_OF_FIRST_VERTEX, this.NUM_VERTICES);\n    }\n}","export class WebGLGameTexture {\n    public webGLTextureId: number;\n    public webGLTexture: WebGLTexture;\n    public image: HTMLImageElement;\n    public width : number;\n    public height : number;\n}","import { MathUtilities } from \"../math/MathUtilities\"\nimport { TiledLayer } from \"../scene/tiles/TiledLayer\"\nimport { TileSet } from \"../scene/tiles/TileSet\"\nimport { WebGLGameRenderingComponent } from './WebGLGameRenderingComponent'\nimport { WebGLGameTexture } from './WebGLGameTexture'\nimport { Viewport } from '../scene/Viewport'\n\nexport class WebGLGameTiledLayerRenderer extends WebGLGameRenderingComponent {\n    public constructor() {\n        super();\n    }\n\n    /**\n     * This function generates the array of attribute data needed to \n     * render our TiledLayer and puts it in the tiled layer argument.\n     */\n    public generateVertexData(tiledLayer: TiledLayer): Float32Array {\n        let someNumberYouHaveToDetermine : number = 4;\n        let dataToFill = [someNumberYouHaveToDetermine];\n        let vertexData: Float32Array = new Float32Array(dataToFill);\n        return vertexData;\n    }\n\n    public getVertexData(renderSetupData: object): Float32Array {\n        // WE WILL NEED THIS TO KNOW HOW LARGE TO MAKE OUR VERTEX DATA BUFFER\n        let tiledLayers: Array<TiledLayer> = <Array<TiledLayer>>renderSetupData;\n        let tiledLayer: TiledLayer = tiledLayers[0];\n        return this.generateVertexData(tiledLayer);\n    }\n\n    public getShaderAttributeNames(): string[] {\n        // YOU'LL NEED TO DEFINE THIS METHOD\n        return [];\n    }\n\n    public getShaderUniformNames(): string[] {\n        // YOU'LL NEED TO DEFINE THIS METHOD\n        return [];\n    }\n\n    public render(  webGL: WebGLRenderingContext,\n                    viewport : Viewport,\n                    tiledLayers: Array<TiledLayer>): void {\n\n            // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\n        let shaderProgramToUse = this.shader.getProgram();\n        webGL.useProgram(shaderProgramToUse);\n\n        // AND THEN RENDER EACH LAYER\n        for (let tiledLayer of tiledLayers) {\n            this.renderTiledLayer(webGL, viewport, tiledLayer);\n        }\n    }\n\n    private renderTiledLayer(\n        webGL: WebGLRenderingContext,\n        viewport : Viewport,\n        tiledLayer: TiledLayer) {\n            // YOU'LL NEED TO DEFINE THIS METHOD\n    }\n}","import { SceneObject } from './SceneObject'\nimport { AnimatedSprite } from './sprite/AnimatedSprite'\nimport { TiledLayer } from './tiles/TiledLayer'\nimport { TileSet } from './tiles/TileSet'\nimport { Viewport } from './Viewport'\nimport { GamePhysics } from '../physics/GamePhysics';\n\nexport class SceneGraph {\n    // AND ALL OF THE ANIMATED SPRITES, WHICH ARE NOT STORED\n    // SORTED OR IN ANY PARTICULAR ORDER. NOTE THAT ANIMATED SPRITES\n    // ARE SCENE OBJECTS\n    private animatedSprites: Array<AnimatedSprite>;\n\n    // SET OF VISIBLE OBJECTS, NOTE THAT AT THE MOMENT OUR\n    // SCENE GRAPH IS QUITE SIMPLE, SO THIS IS THE SAME AS\n    // OUR LIST OF ANIMATED SPRITES\n    private visibleSet: Array<SceneObject>;\n\n    // WE ARE ALSO USING A TILING ENGINE FOR RENDERING OUR LEVEL\n    // NOTE THAT WE MANAGE THIS HERE BECAUSE WE MAY INVOLVE THE TILED\n    // LAYERS IN PHYSICS AND PATHFINDING AS WELL\n    private tiledLayers: Array<TiledLayer>;\n    private tileSets: Array<TileSet>;\n\n    // THE VIEWPORT IS USED TO FILTER OUT WHAT IS NOT VISIBLE\n    private viewport: Viewport;\n\n\n    private player: AnimatedSprite;\n\n    private mouse: number[] = [0, 0];\n\n\n    private physicsSystem: GamePhysics = new GamePhysics();\n\n\n    public constructor() {\n        // DEFAULT CONSTRUCTOR INITIALIZES OUR DATA STRUCTURES\n        this.clear();\n    }\n\n    public clear(): void {\n        this.animatedSprites = [];\n        this.visibleSet = [];\n        this.tiledLayers = [];\n        this.tileSets = [];\n    }\n\n    public setMouse(x: number, y: number): void {\n        this.mouse[0] = x;\n        this.mouse[1] = y\n    }\n\n    public getMouse(): number[] {\n        return this.mouse;\n    }\n\n    public setPlayer(sprite: AnimatedSprite): void {\n        this.player = sprite;\n    }\n\n    public getPlayer(): AnimatedSprite {\n        return this.player;\n    }\n\n    public addTileSet(tileSetToAdd: TileSet): number {\n        return this.tileSets.push(tileSetToAdd) - 1;\n    }\n\n    public getNumTileSets(): number {\n        return this.tileSets.length;\n    }\n\n    public getTileSet(index: number): TileSet {\n        return this.tileSets[index];\n    }\n\n    public addLayer(layerToAdd: TiledLayer): void {\n        this.tiledLayers.push(layerToAdd);\n    }\n\n    public getNumTiledLayers(): number {\n        return this.tiledLayers.length;\n    }\n\n    public getTiledLayers(): Array<TiledLayer> {\n        return this.tiledLayers;\n    }\n\n    public getTiledLayer(layerIndex: number): TiledLayer {\n        return this.tiledLayers[layerIndex];\n    }\n\n    public getNumSprites(): number {\n        return this.animatedSprites.length;\n    }\n\n    public setViewport(initViewport: Viewport): void {\n        this.viewport = initViewport;\n    }\n\n    public getViewport(): Viewport {\n        return this.viewport;\n    }\n\n    public addAnimatedSprite(sprite: AnimatedSprite): void {\n        this.animatedSprites.push(sprite);\n    }\n\n    public getSpriteAt(testX: number, testY: number): AnimatedSprite {\n        for (let sprite of this.animatedSprites) {\n            if (sprite.contains(testX, testY))\n                return sprite;\n        }\n        return null;\n    }\n\n    /**\n     * update\n     * \n     * Called once per frame, this function updates the state of all the objects\n     * in the scene.\n     * \n     * @param delta The time that has passed since the last time this update\n     * funcation was called.\n     */\n    public update(delta: number): void {\n        this.physicsSystem.update(this);\n        for (let sprite of this.animatedSprites) {\n            sprite.update(delta);\n        }\n    }\n\n    public scope(): Array<SceneObject> {\n        // CLEAR OUT THE OLD\n        this.visibleSet = [];\n\n        // PUT ALL THE SCENE OBJECTS INTO THE VISIBLE SET\n        for (let sprite of this.animatedSprites) {\n            // if (sprite.getPosition().getX() + sprite.getSpriteType().getSpriteWidth() >= this.viewport.getX()) {\n            //     if (sprite.getPosition().getX() <= this.viewport.getX() + this.viewport.getWidth()) {\n            //         if (sprite.getPosition().getY() + sprite.getSpriteType().getSpriteHeight() >= this.viewport.getY()) {\n            //             if (sprite.getPosition().getY() <= this.viewport.getY() + this.viewport.getHeight()) {\n\n            //             }\n            //         }\n            //     }\n            // }\n            this.visibleSet.push(sprite);\n        }\n\n        return this.visibleSet;\n    }\n\n    public spritesInRange(xPos: number, yPos: number, range: number): AnimatedSprite[] {\n        let spritesInRange: AnimatedSprite[] = [];\n\n        for (let sprite of this.animatedSprites) {\n            if (sprite.getPosition().getX() + sprite.getSpriteType().getSpriteWidth() >= xPos && sprite.getPosition().getX() <= xPos + range) {\n                if (sprite.getPosition().getY() - sprite.getSpriteType().getSpriteHeight() <= yPos && sprite.getPosition().getY() >= yPos - range) {\n                    spritesInRange.push(sprite);\n                }\n            }\n        }\n        return spritesInRange;\n    }\n\n\n}","import {Vector3} from '../math/Vector3'\n\n/**\n * SceneObject\n * \n * A SceneObject is something that can be placed into the scene graph. It has\n * a position, rotation, and scale in the game world. Note that its position\n * is typically its centered location, so if we're talking about a 2d box, \n * it would be the center of that box.\n */\nexport abstract class SceneObject {\n    private position : Vector3;\n    private rotation : Vector3;\n    private scale : Vector3;\n\n    public constructor() {\n        this.position = new Vector3();\n        this.rotation = new Vector3();\n        this.scale = new Vector3();\n\n        // CLEAR ALL VALUES\n        this.position.set(0.0, 0.0, 0.0, 1.0);\n        this.rotation.set(0.0, 0.0, 0.0, 1.0);\n        this.scale.set(1.0, 1.0, 1.0, 1.0);\n    }\n\n    public getPosition() : Vector3 {\n        return this.position;\n    }    \n\n    public getRotation() : Vector3 {\n        return this.rotation;\n    }\n\n    public getScale() : Vector3 {\n        return this.scale;\n    }\n\n    public abstract contains(testX : number, testY : number) : boolean;\n}","export class Viewport {\n    private width : number;\n    private height : number;\n    private x : number;\n    private y : number;\n\n    public constructor(initWidth : number, initHeight : number) {\n        this.width = initWidth;\n        this.height = initHeight;\n        this.x = 0;\n        this.y = 0;\n    }\n\n    public getWidth() : number {\n        return this.width;\n    }\n\n    public getHeight() : number {\n        return this.height;\n    }\n\n    public getX() : number {\n        return this.x;\n    }\n\n    public getY() : number {\n        return this.y;\n    }\n\n    public inc(incX : number, incY : number) : void {\n        this.x += incX;\n        this.y += incY;\n    }\n\n    public setPosition(initX : number, initY : number) : void {\n        this.x = initX;\n        this.y = initY;\n    }\n\n    \n\n}","import { SceneObject } from '../SceneObject'\nimport { AnimatedSpriteType } from './AnimatedSpriteType'\nimport { AIBehavior, State } from '../../AI/AIBehavior';\n\nexport class AnimatedSprite extends SceneObject {\n    private spriteType: AnimatedSpriteType;\n    private state: string;\n    private animationFrameIndex: number;\n    private frameCounter: number;\n    private direction: number;\n    private ai: AIBehavior;\n    public hasAI: boolean = false;\n    private ignoreViewport: boolean = false;\n\n    public constructor(initSpriteType: AnimatedSpriteType, initState: string) {\n        super();\n        this.spriteType = initSpriteType;\n\n        // START RESET\n        this.state = initState;\n        this.animationFrameIndex = 0;\n        this.frameCounter = 0;\n        this.direction = 0;\n    }\n\n    public setAI(ai: AIBehavior): void {\n        this.ai = ai;\n        this.hasAI = true;\n    }\n\n    public getAI(): AIBehavior {\n        return this.ai;\n    }\n\n    public setIgnoreViewport(): void {\n        this.ignoreViewport = true;\n    }\n\n    public getIgnoreViewport(): boolean {\n        return this.ignoreViewport;\n    }\n\n    public getDirection(): number {\n        // this.direction += 1;\n        // if (this.direction == 360) {\n        //     this.direction = 0;\n        // }\n        return this.direction;\n\n    }\n\n    public setDirection(newDirection: number) {\n        this.direction = (newDirection % 360);\n\n    }\n\n\n\n    public getAnimationFrameIndex(): number {\n        return this.animationFrameIndex;\n    }\n\n    public getFrameCounter(): number {\n        return this.frameCounter;\n    }\n\n    public getSpriteType(): AnimatedSpriteType {\n        return this.spriteType;\n    }\n\n    public getState(): string {\n        return this.state;\n    }\n\n    public setState(initState: string): void {\n        this.state = initState;\n        this.animationFrameIndex = 0;\n        this.frameCounter = 0;\n    }\n\n    public update(delta: number): void {\n        this.frameCounter++;\n\n        // HAVE WE GONE PAST THE LAST FRAME IN THE ANIMATION?\n        var currentAnimation = this.spriteType.getAnimation(this.state);\n        var currentFrame = currentAnimation[this.animationFrameIndex];\n        if (this.frameCounter > (currentFrame.duration)) {\n            this.animationFrameIndex++;\n            if (this.animationFrameIndex >= currentAnimation.length) {\n                this.animationFrameIndex = 0;\n            }\n            this.frameCounter = 0;\n        }\n\n\n        if (this.hasAI == true) {\n            this.ai.update();\n            this.ai.resolveState(this);\n        }\n    }\n\n    public contains(pointX: number, pointY: number): boolean {\n        let spriteWidth = this.getSpriteType().getSpriteWidth();\n        let spriteHeight = this.getSpriteType().getSpriteHeight();\n        let spriteLeft = this.getPosition().getX();\n        let spriteRight = this.getPosition().getX() + spriteWidth;\n        let spriteTop = this.getPosition().getY();\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\n        if ((pointX < spriteLeft)\n            || (spriteRight < pointX)\n            || (pointY < spriteTop)\n            || (spriteBottom < pointY)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    /**RENAME THIS METHOD SO IT DENOTES PIXEL LOCATION IN TEXTURE */\n    public getLeft(): number {\n        return this.spriteType.getLeft(this.state, this.animationFrameIndex);\n    }\n\n    public getTop(): number {\n        return this.spriteType.getTop(this.state, this.animationFrameIndex);\n    }\n\n    public toString(): string {\n        let summary: string = \"{ position: (\"\n            + this.getPosition().getX() + \", \" + this.getPosition().getY() + \") \"\n            + \"(state: \" + this.getState() + \") \"\n            + \"(animationFrameIndex: \" + this.getAnimationFrameIndex() + \") \"\n            + \"(frameCounter: \" + this.getFrameCounter() + \") \";\n        return summary;\n    }\n\n\n\n}","import {WebGLGameTexture} from '../../rendering/WebGLGameTexture'\n\nexport class AnimationFrame {\n    public left : number;\n    public top : number;\n    public duration : number;\n\n    constructor(initLeft : number, initTop : number, initDuration : number) {\n        this.left = initLeft;\n        this.top = initTop;\n        this.duration = initDuration;\n    }\n}\n\nexport class AnimatedSpriteType {\n    private spriteSheetTexture : WebGLGameTexture;\n    private animations : Map<string, Array<AnimationFrame>>;\n    private spriteWidth : number;\n    private spriteHeight : number;\n\n    public constructor(initSpriteSheetTexture : WebGLGameTexture, \n                initSpriteWidth : number, initSpriteHeight : number) {\n        this.spriteSheetTexture = initSpriteSheetTexture;\n        this.animations = new Map();\n        this.spriteWidth = initSpriteWidth;\n        this.spriteHeight = initSpriteHeight;\n    }\n\n    public addAnimation(state : string) : void {\n        this.animations.set(state, new Array<AnimationFrame>());\n    }\n\n    public addAnimationFrame(state : string, index : number, frameDuration : number) : void {\n        var columns = this.spriteSheetTexture.width/this.spriteWidth;\n        var rows = this.spriteSheetTexture.height/this.spriteHeight;\n        var col = index % columns;\n        var row = Math.floor(index /  columns);\n        var left = col * this.spriteWidth;\n        var top = row * this.spriteHeight;\n        this.animations.get(state).push(new AnimationFrame(left, top, frameDuration));\n    }\n\n    public getSpriteWidth() : number {\n        return this.spriteWidth;\n    }\n\n    public getSpriteHeight() : number {\n        return this.spriteHeight;\n    }\n\n    public getSpriteSheetTexture() : WebGLGameTexture {\n        return this.spriteSheetTexture;\n    }\n\n    public getAnimation(state : string) : Array<AnimationFrame> {\n        return this.animations.get(state);\n    }\n\n    public getLeft(state : string, frameIndex : number) : number {\n        let animationFrame : AnimationFrame = this.animations.get(state)[frameIndex];\n        return animationFrame.left;\n    }\n\n    public getTop(state : string, frameIndex : number) : number {\n        let animationFrame : AnimationFrame = this.animations.get(state)[frameIndex];\n        return animationFrame.top;\n    }\n}","import { WebGLGameTexture } from \"../../rendering/WebGLGameTexture\";\n\nexport class TileSet {\n    private name : string;\n    private columns : number;\n    private rows : number;\n    private tileWidth : number;\n    private tileHeight : number;\n    private tileSpacing : number;\n    private tileSheetWidth : number;\n    private tileSheetHeight : number;\n    private firstIndex : number;\n    private texture : WebGLGameTexture;\n\n    constructor(initName : string, \n                initColumns : number,\n                initRows : number,\n                initTileWidth : number,\n                initTileHeight : number,\n                initTileSpacing : number,\n                initTileSheetWidth : number,\n                initTileSheetHeight : number,\n                initFirstIndex : number,\n                initTexture : WebGLGameTexture) {\n        this.name = initName;\n        this.columns = initColumns;\n        this.rows = initRows;\n        this.tileWidth = initTileWidth;\n        this.tileHeight = initTileHeight;\n        this.tileSpacing = initTileSpacing;\n        this.tileSheetWidth = initTileSheetWidth;\n        this.tileSheetHeight = initTileSheetHeight;\n        this.firstIndex = initFirstIndex;\n        this.texture = initTexture;\n    }\n\n    public getName() : string {\n        return this.name;\n    }\n\n    public getColumns() : number {\n        return this.columns;\n    }\n\n    public getRows() : number { \n        return this.rows;\n    }\n\n    public getTileWidth() : number {\n        return this.tileWidth;\n    }\n\n    public getTileHeight() : number {\n        return this.tileHeight;\n    }\n\n    public getTileSpacing() : number {\n        return this.tileSpacing;\n    }\n\n    public getTileSheetWidth() : number {\n        return this.tileSheetWidth;\n    }\n\n    public getTileSheetHeight() : number {\n        return this.tileSheetHeight;\n    }\n\n    public getFirstIndex() : number {\n        return this.firstIndex;\n    }\n\n    public getTexture() : WebGLGameTexture {\n        return this.texture;\n    }\n}","import { TileSet } from \"./TileSet\";\n\nexport class TiledLayer {\n    private collidable : boolean;\n    private tiles : Array<number>;\n    private columns : number;\n    private rows : number;\n    private tileSet : TileSet;\n    \n    // WE WILL STORE RENDERING-SPECIFIC DATA HERE\n    private renderData : object;\n\n    constructor(initColumns : number,\n                initRows : number,\n                initTileSet : TileSet) {\n        this.tiles = new Array();\n        this.columns = initColumns;\n        this.rows = initRows;\n        this.tileSet = initTileSet;\n    }\n\n    public setRenderData(initRenderData : object) : void {\n        this.renderData = initRenderData;\n    }\n\n    public getRenderData() : object {\n        return this.renderData;\n    }\n\n    public getMinimumVisibleColumn(viewportLeft : number) : number {\n        return (viewportLeft / this.tileSet.getTileWidth());\n    }\n\n    public getMaximumVisibleColumn(viewportRight : number) : number {\n        return (viewportRight / this.tileSet.getTileWidth());\n    }\n\n    public getMinimumVisibleRow(viewportTop : number) : number {\n        return (viewportTop / this.tileSet.getTileHeight());\n    }\n\n    public getMaximumVisibleRow(viewportBottom : number) : number {\n        return (viewportBottom / this.tileSet.getTileHeight());\n    }\n\n    public getNumCells() : number {\n        return this.columns * this.rows;\n    }\n\n    public getColumns() : number {\n        return this.columns;\n    }\n\n    public getRows() : number {\n        return this.rows;\n    }\n\n    public getTileSet() : TileSet {\n        return this.tileSet;\n    }\n\n    public isCollidable() : boolean {\n        return this.collidable;\n    }\n\n    public addTile(tileSetCellIndex : number) : void {\n        this.tiles.push(tileSetCellIndex);\n    }\n\n    public setTile(column : number, row : number, tileSetCellIndex : number) {\n        let tileIndex : number = this.getTileIndex(column, row);\n        this.tiles[tileIndex] = tileSetCellIndex;\n    }\n\n    public getTileIndex(column : number, row : number) : number {\n        return (row * this.columns) + column;\n    }\n\n    public getTileSetCellIndex(column : number, row : number) : number {\n        let tileIndex : number = this.getTileIndex(column, row);\n        return this.tiles[tileIndex];\n    }\n\n    public getTile(column : number, row : number) : number {\n        let index = this.getTileIndex(column, row);\n        return this.tiles[index];\n    }\n}","/*\n * This provides responses to UI input.\n */\nimport { AnimatedSprite } from \"../scene/sprite/AnimatedSprite\"\nimport { SceneGraph } from \"../scene/SceneGraph\"\nimport { State } from \"../AI/AIBehavior\";\n\nexport class UIController {\n    private spriteToDrag: AnimatedSprite;\n    private scene: SceneGraph;\n    private dragOffsetX: number;\n    private dragOffsetY: number;\n\n    private keys: string[];\n\n    public constructor(canvasId: string, initScene: SceneGraph) {\n        this.spriteToDrag = null;\n        this.scene = initScene;\n        this.dragOffsetX = -1;\n        this.dragOffsetY = -1;\n\n        this.keys = [];\n\n        let canvas: HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(canvasId);\n        canvas.tabIndex = 1;\n        // canvas.addEventListener(\"mousedown\", this.mouseDownHandler);\n        canvas.addEventListener(\"mousemove\", this.mouseMoveHandler);\n        // canvas.addEventListener(\"mouseup\", this.mouseUpHandler);\n        // canvas.addEventListener(\"keydown\", this.keybaordPress);\n        canvas.addEventListener(\"keypress\", this.keybaordPressHeld);\n        canvas.addEventListener(\"keydown\", this.keybaordPressDown);\n        canvas.addEventListener(\"keyup\", this.keybaordPressUp);\n    }\n\n    // public mouseDownHandler = (event: MouseEvent): void => {\n    //     let mousePressX: number = event.clientX;\n    //     let mousePressY: number = event.clientY;\n    //     let sprite: AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\n    //     console.log(\"mousePressX: \" + mousePressX);\n    //     console.log(\"mousePressY: \" + mousePressY);\n    //     console.log(\"sprite: \" + sprite);\n    //     if (sprite != null) {\n    //         // START DRAGGING IT\n    //         this.spriteToDrag = sprite;\n    //         this.dragOffsetX = sprite.getPosition().getX() - mousePressX;\n    //         this.dragOffsetY = sprite.getPosition().getY() - mousePressY;\n    //     }\n    // }\n\n    public mouseMoveHandler = (event: MouseEvent): void => {\n        let player: AnimatedSprite = this.scene.getPlayer();\n\n        if (player ? player.hasAI : false) {\n            player.getAI().setBehavior([State.WALK]);\n        }\n        this.scene.setMouse(event.clientX + this.scene.getViewport().getX(), event.clientY - this.scene.getViewport().getY());\n    }\n\n    // public mouseUpHandler = (event: MouseEvent): void => {\n    //     this.spriteToDrag = null;\n    // }\n\n\n    public keybaordPressDown = (event: KeyboardEvent): void => {\n        if (event.code == \"KeyA\" || event.code == \"KeyS\" || event.code == \"KeyW\" || event.code == \"KeyD\") {\n            let code = event.code;\n            if (this.keys.indexOf(code) == -1) {\n                this.keys.push(code);\n            }\n        }\n    }\n\n\n    public keybaordPressHeld = (event: KeyboardEvent): void => {\n        if (event.code == \"KeyA\" || event.code == \"KeyS\" || event.code == \"KeyW\" || event.code == \"KeyD\") {\n            let viewport = this.scene.getViewport();\n            var xOffset = 0;\n            var yOffset = 0;\n            this.keys.forEach(letter => {\n\n                if (letter == 'KeyW') {\n                    console.log('KeyPress: W');\n                    yOffset += 10;\n                } else if (letter == 'KeyA') {\n                    console.log('KeyPress: A');\n                    xOffset -= 10;\n                } else if (letter == 'KeyS') {\n                    console.log('KeyPress: S');\n                    yOffset -= 10;\n                } else if (letter == 'KeyD') {\n                    console.log('KeyPress: D');\n                    xOffset += 10;\n                }\n            });\n\n            viewport.setPosition(viewport.getX() + xOffset, viewport.getY() + yOffset);\n        }\n    }\n\n    public keybaordPressUp = (event: KeyboardEvent): void => {\n        let code = event.code;\n        this.keys.splice(this.keys.indexOf(code), 1);\n    }\n\n\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}